all right then gang so when you're working with docker there's a little bit of terminology and a few core concepts that you need to understand and two of those things are what's known as images and containers so in this video i'm going to explain both of these concepts at a bird's eye kind of level so that you understand the parts that they both play when we're using docker and then as we go further into the series we're going to explore them both in a bit more depth so first up let's talk about images so images are like blueprints for containers and they contain the following things stored inside them but they don't actually have them running inside them they just kind of store them inside them so those things are the runtime environment like a specific node version the application code itself any dependencies the application needs to run any configuration such as environment variables and any additional instructions such as commands which need to be run for the application to work images also have a file system of their own too which is independent from the rest of your computer now images are read only which means that once you've created an image it cannot be changed if you need to change something about the image then you need to instead create a brand new image to incorporate that change so again images are like blueprints for containers and they include every single thing that our application might need to run now containers are runnable instances of those images so we create an image which is a blueprint for a container then when we run the image it creates a container which is a process that can run our application exactly as outlined in the image so it's going to have the correct runtime environment access to the image file system dependencies etc so a container is a process which runs our application as outlined by the image that we created now containers are also what's known as an isolated process meaning that they run independently from any other process on your computer so it's a bit like our applications being run in its own box somewhere on our computer packaged away with everything it needs to run inside it and it's completely isolated from any other processes on our computer so let's think about what that means for a minute i can make an image which contains everything an application needs to run the operating system the correct node or python version the dependencies the source code etc then i can run that image to create a container to run my application and it doesn't matter what version of node or python or whatever it is that i'm using for the application that's installed on my computer because it's all running inside the container which had the correct versions of everything inside it that it needs for the application to run and that also means that i can just share this docker image with anyone who needs to run this application on their own computer they can just run the image to make a container to run that application and again it wouldn't matter what versions of anything that they have installed on their own computer because that's all pre-packed inside the image and container therefore when they run it and the app will run exactly the same way as it would on my computer or somebody else's computer or on a production server so in the rest of this series we'll be looking at how to create images first of all and then how to run containers based on those images