all right then so we already know now how to make an image and in docker desktop we can see that image listed right here in the images tab now we can run that image to create a container which then runs our application by clicking on this run button right here and then docker will take that image and it's going to run it and in turn that creates a container for us now when we do this we get some extra settings that we can set and this step is quite important so first of all we can give the container a name i'm just going to call it my app one then underscore and c for container and then also we can specify a port by which we can reach this container on our own machine so think about it in our application we have a node server which was listening to requests on port 4000 right let me just bring up vs code to show you that inside the app.js file so you can see that right here we listen for requests to port 4000 but that is a port that's going to be exposed by the container it's not a port exposed by our computer directly that we can access directly via localhost so if i was to visit localhost port 4000 in the browser then it wouldn't reach our application because again this is not a port that's exposed directly by our computer it's one exposed by our container but docker allows us to map a local host port number to the port exposed by the container so i could type 5000 in here if i wanted to and then that would map port 5000 on localhost to port 4000 exposed by the container and then if i was to visit localhost port 5000 in the browser it would then hit our application because that localhost port is now essentially mapped to the container port number now typically we'd keep the port numbers the same to avoid any confusion i just wanted to demonstrate that these don't have to be the same so i can change this to 4000 now and it would do exactly the same thing but this time it would map localhost port 4000 support 4000 exposed by the container and by the way this port mapping option on docker desktop is only going to be there if you added the exposed instruction in your docker file if you didn't do that then it won't be here so we also get an option for volumes but we haven't touched on those yet so we'll leave that blank for now and now if we hit run then it's going to start up the container and then we should see that container listed in the containers tab right here and any containers that are currently running should have this kind of green colored icon next to it if any containers not running this is probably going to be gray instead so we can open this up in a browser now by clicking on this icon right here and that's going to now take us to localhost port 4000 so inside the browser we can see the response that we get from the application the json data so this is our working now we have the application running in the container in isolation and we can also reach that from a browser on our computer awesome now if i close the browser we can still see that the container is still running right here now we can stop the container by clicking this stop button but this doesn't delete the container it's still listed here it's just not running at the moment now we're going to see how to delete containers permanently later on but for now i also want to show you how we can do all of this stuff how to run images to start a container and how to stop a container from the command line as well alright so we saw that we can run an image in docker desktop to create and run a container based on that image we can also do the same thing from the terminal as well as stop containers too so first of all to run an image to create a container we need either the id of that image or its name now we can find that out by listing all the images that we currently have and we can do that by typing in the terminal docker images and then pressing enter and then right here we can see a list of images that we have now right now that's only two images but later you might have more and we can see the name or tag of the image right here and also the id of the image as well so i'm going to use the name of the image to run it which is my app so to do this to run an image we say docker run and then the name of the image or the id of the image that we want to run in our case the name of the image is my app now before we hit enter i want to do one more thing i want to give the container that we're about to run a name and to do that we need to go back before the image to add some options so any flags or options that we add go directly after the run command and before the image name or the id so in this case the option or the flag that we want to add is double dash name and this allows us to name the container we're about to make so i'm going to call this my app underscore container 1 and the c stands for container but you can call it what you want and that's all we need to do so now we can just hit enter to create this container and now we can see that the app did start running in that container because eventually you'll get this message that says listing for requests on port 4000 so now what do you think is going to happen if we try this in a browser well let's give it a whirl so if i visit localhost port 4000 we see that well it doesn't actually work and the reason is because of what we talked about earlier the ports listening for requests is exposed by the container not our computer so we can't directly access it via localhost like this remember we need to map our localhost port to the container port that's exposed and we did that in the docker desktop tool and we can also do it from the command line as well so then now in vs code we can see that this container is still running and we need to stop it first of all and we know that it's running because at the moment we have an active process blocking the terminal the node server is still listening for requests and we're attached to that process in the terminal so before we do anything else we need to stop the container now the way we do that is by opening up a new tab in the terminal and then first of all typing docker then a space then ps and press enter and ps stands for processes and this shows us a list of running containers and we can see our container running right here it says the container id the image it was based on and also the name that we gave it as well so we want to stop this container and to do that we can just type in the terminal docker then stop then after that either the container id or the container name that we want to stop so let's type in the container name and then hit enter so after a few seconds eventually this should stop the container and then when it has stopped you can head back to the other terminal and now you'll be able to see that the process has stopped and the terminal is no longer blocked right so now we want to run the container again but this time we want to specify a port on our computer that can be mapped to a port exposed by the container so to do that we type docker run just like before and then we add the name flag and give the container a name again just like before i'm gonna give this container a new name which is gonna be my app underscore and then c2 for container two and then this time before specifying the image we wanna run we can add on a hyphen d flag which stands for publish and this allows us to publish a container's port to the host computer or in other words map the container's port to a port on our computer the host computer so after the p we say 4000 colon 4000 where the port number on the right is the port exposed by the container and then the number on the left is the port that we want to map to that container on our computer so now this means we'll be able to access the container port via port 4000 on localhost right so finally we can specify the image name that we want to run which is my app and actually one more thing before we hit enter if you want to run this container without it blocking your terminal like it did before you can add on the detached flag at the start and this means that if we run the container in detached mode our terminal is essentially detached from the process all right so now we can hit enter to run this container and after a few seconds we can see that the container will be up and running and it will be listening for requests again at port 4000 but this time we should be able to access it using localhost port 4000 because we added that p flag and also we can see that our terminal isn't blocked anymore either because we added the detached flag as well all right so now in a browser at this address local host port 4000 we can now see a response cool all right then so now every time we run docker run to run an image we create a new container that's creating a brand new one each time and we give it a name and we can see that if we open up docker desktop we can see all of these containers we have right here so every time we do this we're making a new container now we can if we want to stop a container and then restart it so first of all what i'm going to do is say docker and then i want to stop a container and the one currently running is this thing right here so i can copy that paste it in and press enter and this will hopefully stop the container first of all might take just about 30 seconds or so and then when it has stopped we can restart one of the containers that we already have now let me just show you something if i say docker ps that listed out all the containers right if i press enter notice we don't actually see any containers there even though we do have a lot of containers we have all these containers right here now this ps thing right here only lists out containers that are currently or running if we want to see all of them we can say docker ps and then hyphen a to say all and now we can see all the containers right so if i wanted to just re-run or restart one of these containers i could do i could restart this one right here and to do that i could just say docker and then start this time not run because docker run runs an image to create a new container docker start can start up an existing container so docker start and then my app and then underscore c2 now this time we don't need to reconfigure the port mapping or anything like that because that was already created for the container when we ran the image so all of that information is still kind of stored for the container all we have to do is start it back up again so if i press enter hopefully in a second or so it's gonna run the container and again remember we added the detached flag meaning this is not blocking the terminal down here because we're in detached mode now if i open up docker desktop we can see that this thing now is running again and if i open up the browser and bring this over here we can see everything is working so now we've just restarted that server that we had okay so my friends that's how we can run images to make containers and then map container ports to our host computer and again you can do all of this from either docker desktop or from the command line we're gonna mainly be sticking to the command line from now on next up we're gonna talk about something called layer caching