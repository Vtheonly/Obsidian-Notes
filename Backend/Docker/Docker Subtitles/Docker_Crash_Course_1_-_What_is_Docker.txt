hey gang and welcome to your very first docker tutorial [Music] so then i've been meaning to make a docker tutorial for a while now but it always got sidelined because there was another series that i wanted to make first but now i've decided to bring it the attention it deserves and create a crash course all about it so docker is one of those things that sometimes gets overlooked by new developers because at first glance it's hard to understand why we might use it but it's definitely worth investing your time into because it can make developing applications either on your own or in a team much easier to manage and the way it does that is by using what's known as containers to run applications in isolated environments on a computer like a node application for example or a react application or a mongodb service or something else entirely like a python application now we'll be talking more about containers later in the course but the crux of it is this imagine if i was in a dev team and i was making an application in a node.js environment and that node.js version that i needed for the application was a very specific version that had a feature i needed to use now also imagine that i wanted to share the application with another person on my team so that they can run it on their computer as well well before they do that they'd have to set up their development environment to match mine to make sure the application runs correctly for example they'd have to have the same version of node.js installed that the application needs to run correctly they'd also need to install all the project dependencies and set up any configuration like environment variables to make sure everything works the same way so there'd be a significant setup process just to get the application running on another computer now imagine the same scenario but with multiple other applications as well all requiring their very own specific environment setup and these applications might need to be run on multiple different machines well that would mean a lot of setup every time we want to run a different application which requires a different development environment even on our own machines because different applications might require different versions of node or python or php or something else and that's where docker and containers come into play so you can think of a container for now as like a box or a package that contains everything our application needs to run so all the source code dependencies the correct runtime environment and versions etc and this container can run our application then in isolation away from any other processes on our computer so it wouldn't matter what versions of node or python or anything else is installed on our computer because everything the application needs to run is inside the container and then this makes it much easier for me or other people in my team to run these different applications on our computers and we wouldn't need to worry about setting up different versions of anything or installing dependencies because it's all in the container itself a predictable consistent and isolated environment the only thing that i or someone else running these containers will need on their computer is docker to manage those containers and that's at the heart of what docker is all about it's a tool for managing containers so again this is a simplified overview of what docker and containers are all about and we'll look at more detail into how they work later on and also how they can improve the deployment of applications to a server as well because much in the same way that containers can be run on your own or somebody else's computer they can also be pulled onto your production server and that way you don't need to configure the server because all the configuration and setup is in the container already now you might be thinking well what about virtual machines can't they solve the same problem that containers solve and yeah they can but there's some differences which sometimes make containers a better option first of all each virtual machine that you make runs its own fully blown operating system with its own kernel and that's running on top of your host computer's operating system whatever that might be but containers don't they share the host computer's operating systems kernel and so they're more lightweight than virtual machines and less bloated it also means that they're typically quicker to start up and they use less memory on your computer now containers do include a slimmed down version of a specific operating system but they still use the host machine's kernel under the hood so essentially containers are much more lightweight and quicker than virtual machines although both can solve the same problems and there will be times when you'd prefer a virtual machine to a container so it's not a case of one is better than the other for everything but anyway now we have this kind of bird's eye view of what docker and containers are all about the next step is to install docker and start using it we'll be doing that in the next lesson but first of all i just want to finish up this one with a few side points so first of all before you start this course you should probably have a little bit of experience in web development in general maybe you've created node applications react sites or something like that nothing specific but you've got a general understanding of web dev in this series my code examples are mainly going to consist of node and javascript so it might be slightly beneficial if you know a little bit about those first of all so how to make for example a simple node express app or how to use nodebomb but it's not absolutely essential i'm also going to be using docker with react later in the series but again you don't really need to know much about react to learn the docker side of things but i'm not going to pretend that it won't be useful to know the basics now if you want to learn some of that first i've got loads of tutorials available all about node javascript react and much more both on youtube at the net ninja pro site so i'm going to leave some of those links to those other courses down below the video i've also created course files for different lessons in this tutorial series you can find them all at this repo docker crash course and i'll leave the link down below the video so if you want to see the code for a specific lesson for example lesson five you'd select the lesson five branch right here and then you'd see all of the code inside that branch now if you want to download a specific lesson you select the lesson then go to this code button and select download zip and that's going to download a zip folder of that particular lesson for you so again this link to this repo is going to be down below the video so anyway that's your introduction to docker in the next lesson we're going to go ahead and install docker on our computer by the way if you want to watch this entire course now without youtube adverts you can do it's all up on the net ninja website netninja.dev you can buy the course for two dollars to get instant access to all of it or you can sign up to net ninja pro and get instant access to all of my courses without adverts as well as premium courses not found on youtube including my udemy ones that's nine dollars a month and you can get your first month half price when you use this promo code right here so i'm gonna leave this link down below in the video description for you to sign up and i really hope you enjoyed this series and please do not forget to share subscribe and like the videos that really helps a lot and i'm going to see you in the very next lesson