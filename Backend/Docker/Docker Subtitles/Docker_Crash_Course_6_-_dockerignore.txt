all right then gang so we have this docker file now and we also created an image from that docker file in the last lesson and we can see that image if we open up docker desktop and we can see it right here now at the minute you'll notice inside our project folder in vs code there's no node modules folder even though we have dependencies for this project but that's okay because we're not going to be running this project directly on our computer inside this folder instead we're going to be running the image that we created via an isolated container later on and all the dependencies were installed on that image because of this run npm install instruction right here so what that did was create the node modules folder inside the image and put all the dependencies inside that folder so it really doesn't matter that it's not here inside this project folder on our computer now sometimes the node modules folder will exist in your local project on your computer for example if i come to the terminal and i type npm install inside the project directory it's going to look at the package.json file and install all of the dependencies and it's going to put them inside a node modules folder in this project directory and by the way you would need node.js installed on your computer in order to run this command but don't feel like you need to go out and install it this is just a demonstration and beyond doing this you won't really need node installed or anything else anyway now we've installed all the dependencies we can see we have this node modules folder inside our project right here on our computer and if i was to create another image based on this project right now then in this copy step it would copy the entire node modules folder over as well because we're just copying over everything in this directory now that's bad for two reasons first we already installed the dependencies on the image in this previous step where we said npm install and that creates a node modules folder directly on the image so if we copy this node modules folder later on at the copy step then it's just going to replace the one already created on the image and that could be a problem if some of the packages inside the node modules folder over here are out of date so that's the first problem right the second reason this is bad is because it's going to take more time then to create the image and copy over all the files because it has to copy over a load more stuff inside the node modules folder which don't really need copying over so ideally when we're creating the image we don't want docker to copy over the node modules folder if there is one and we can get around that by making a docker ignore file in the project directory so to do this we just create a new file and we call it dot docker ignore and then inside this file we can specify any files or folders that we want docker to ignore when it copies them over to the image so i could say right here node underscore modules and that means that when we copy over the files docker will ignore the node modules folder and it won't now copy that to the image now if you wanted to add other things to this file you could and they wouldn't get built into the image either for example logs or sensitive information that you don't want going inside the image itself and if you wanted to exclude any file with a certain extension like an md extension then you could just say asterisk then dot md so this means basically ignore any file name which is denoted by the asterisk with an extension of md now i'm just going to leave it as the node modules for this docker ignore file and that's pretty much it for now so now when we build this image in the future it won't include this node modules folder inside the built image even though it's inside our local project here so just remember that if you do have known modules locally in your project you can tell docker to ignore that folder by using a docker ignore file all right so next up we're going to take a look at how to run the image that we created to spin up a container