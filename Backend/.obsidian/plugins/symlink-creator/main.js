/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var w=Object.create;var d=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var v=(n,r)=>{for(var e in r)d(n,e,{get:r[e],enumerable:!0})},k=(n,r,e,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let i of S(r))!T.call(n,i)&&i!==e&&d(n,i,{get:()=>r[i],enumerable:!(s=P(r,i))||s.enumerable});return n};var C=(n,r,e)=>(e=n!=null?w(x(n)):{},k(r||!n||!n.__esModule?d(e,"default",{value:n,enumerable:!0}):e,n)),b=n=>k(d({},"__esModule",{value:!0}),n);var A={};v(A,{default:()=>u});module.exports=b(A);var t=require("obsidian"),p=require("child_process"),h=C(require("fs")),l=require("path"),D={defaultTargetPath:""},u=class extends t.Plugin{async onload(){await this.loadSettings(),this.addCommand({id:"create-symlink",name:"Creates a symlink to a folder",callback:()=>this.createSymlink()}),this.addCommand({id:"create-symlink-file",name:"Creates a symlink to a file",callback:()=>this.createSymlinkFile()})}onunload(){}async loadSettings(){this.settings=Object.assign({},D,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async createSymlinkFile(){if(!t.Platform.isDesktop){new t.Notice("This plugin only works on desktop.");return}new g(this.app,(e,s)=>{if(!h.existsSync(e)){new t.Notice("Source file path does not exist. Please ensure it does. Symlinks cannot be created if the source file path does not exist.");return}let i=this.extendActivePath(s);if(h.existsSync(i)){new t.Notice("Target file path exist. Please ensure it does not. Symlinks cannot be created if the target file path already exists.");return}let a="";if(t.Platform.isWin)a=`mklink "${i}" "${e}"`;else if(t.Platform.isLinux||t.Platform.isMacOS)a=`ln -s "${e}" "${i}"`;else{new t.Notice("Unsupported platform.");return}(0,p.exec)(a,(o,y,c)=>{if(o){if(c){console.error(`Error: ${c}`),new t.Notice(`Error: ${c}`);return}}else new t.Notice("Symlink created successfully."),this.refreshAfterSymlink(i)})}).open()}async createSymlink(){if(!t.Platform.isDesktop){new t.Notice("This plugin only works on desktop.");return}new m(this.app,(e,s,i)=>{if(!h.existsSync(e)){new t.Notice("Source path does not exist. Please ensure it does. Symlinks cannot be created if the source path does not exist.");return}let a=this.extendActivePath(s);if(h.existsSync(a)){new t.Notice("Target path exist. Please ensure it does not. Symlinks cannot be created if the target path already exists.");return}let o="";if(t.Platform.isWin)switch(i){case"symlink":o=`mklink /D "${a}" "${e}"`;break;case"junction":o=`mklink /J "${a}" "${e}"`;break}else if(t.Platform.isLinux||t.Platform.isMacOS)o=`ln -s "${e}" "${a}"`;else{new t.Notice("Unsupported platform.");return}(0,p.exec)(o,(y,c,f)=>{if(y){if(f){console.error(`Error: ${f}`),new t.Notice(`Error: ${f}`);return}}else new t.Notice("Symlink created successfully."),this.refreshAfterSymlink(a)})}).open()}getActivePath(){let e=this.app.workspace.getActiveFile(),s;if(e){let i=e.path;s=i.substring(0,i.lastIndexOf("/"))}else s="";return s}extendActivePath(e){let s=this.getActivePath();s=(0,t.normalizePath)((0,l.join)(s,e));let i=this.app.vault.adapter.basePath;return(0,l.join)(i,s)}async refreshVault(){await this.app.vault.adapter.list("")}async forceRefresh(e){let s=this.app.vault.getAbstractFileByPath(e);s instanceof t.TFolder&&this.app.vault.trigger("rename",s,e)}async refreshAfterSymlink(e){await new Promise(s=>setTimeout(s,100)),await this.refreshVault(),await this.forceRefresh(e),this.app.vault,e.split("/").length===1&&await this.forceRefresh("")}},m=class extends t.Modal{constructor(e,s){super(e);this.sourcePath="";this.targetPath="";this.linkType="junction";this.onSubmit=s}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:"Create symlink"}),new t.Setting(e).setName("Source directory").setDesc("This is the folder you want to create a symlink to. The source directory needs to exist.").addButton(s=>s.setButtonText("Choose folder").setCta().onClick(async()=>{let{remote:i}=window.require("electron"),a=await i.dialog.showOpenDialog({properties:["openDirectory"]});a&&a.filePaths.length>0&&(this.sourcePath=a.filePaths[0],s.setButtonText((0,l.basename)(this.sourcePath)))})),new t.Setting(e).setName("Target directory path").setDesc("This is the path where the symlink will be created. The target directory should not exist and will be newly created.").addText(s=>s.onChange(i=>this.targetPath=i)),t.Platform.isWin&&new t.Setting(e).setName("Link type").setDesc("Choose the type of link to create.").addDropdown(s=>s.addOption("junction","Directory junction (default)").addOption("symlink","Symbolic link (across volumes, but needs admin!)").setValue(this.linkType).onChange(i=>{this.linkType=i})),new t.Setting(e).addButton(s=>s.setButtonText("Create").setCta().onClick(()=>{this.sourcePath&&this.targetPath?(this.onSubmit(this.sourcePath,this.targetPath,this.linkType),this.close()):new t.Notice("Both paths are required.")}))}onClose(){let{contentEl:e}=this;e.empty()}},g=class extends t.Modal{constructor(e,s){super(e);this.sourcePath="";this.targetPath="";this.onSubmit=s}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:"Create symlink"});let s="This is the file you want to create a symlink to. The source file needs to exist.";t.Platform.isWin&&(s+=" Please note: You need to activate 'Developer Mode' or need admin rights to create symlinks on Windows!"),new t.Setting(e).setName("Source file").setDesc(s).addButton(i=>i.setButtonText("Choose file").setCta().onClick(async()=>{let{remote:a}=window.require("electron"),o=await a.dialog.showOpenDialog({properties:["openFile"]});o&&o.filePaths.length>0&&(this.sourcePath=o.filePaths[0],i.setButtonText((0,l.basename)(this.sourcePath)))})),new t.Setting(e).setName("Target file path").setDesc("This is the path where the symlink will be created. The target file path should not exist and will be newly created.").addText(i=>i.onChange(a=>this.targetPath=a)),new t.Setting(e).addButton(i=>i.setButtonText("Create").setCta().onClick(()=>{this.sourcePath&&this.targetPath?(this.onSubmit(this.sourcePath,this.targetPath),this.close()):new t.Notice("Both paths are required.")}))}onClose(){let{contentEl:e}=this;e.empty()}};

/* nosourcemap */