 Avoir ce nouveau chapitre, on va parler du use-ref. Alors c'est quelque chose que l'on avait déjà évoqué, lorsqu'on a parlé des composants de sa forme de classe avec la fonction CUE-TREF. Si vous souvenez, c'est quelque chose qui permet de récupérer les lémants dans le domne. Mais ça va fonctionner de la même manière à ce niveau-là. Donc, on s'imagine que on a un champ ici, une pote de type texte, et on aimerait bien récupérer la valeur. Et ce champ, contrairement d'habitude, on ne va pas le contrôler via Riat. Donc on va créer un petit bouton, et on mettra récupérer la valeur. Donc pour récupérer cet élément-là, on va créer une référence. Et là, on est en bt parce qu'il nous faut passer quelque chose. Donc lorsque vous utilisez les oucs et les composants de sa forme de fonction, vous avez YUSREF. YUSREF va vous renvoyer une valeur qui aura une propriété courante qui nous permettra d'avoir l'instance courante. Donc je vais créer ici une nouvelle constante que je vais appeler input, et je ferai un YUSREF. Et je lui passerai la valeur initiale. Donc moi, je lui passe comme valeur mieux, le parce qu'au début, je ne sais pas quoi ça fait référence. Maintenant, je peux créer mon angler. Donc je vais créer une constante qui va s'appeler EndoleButton. Flick. Et ça sera une fonction qui prendra en paramètre l'événement, mais ici, je n'ai pas l'intention de l'utiliser. Et là, ce que je pourrais faire, c'est faire un console.log, input.co pour récupérer l'instance courante, point value. Au niveau de mon input maintenant, je peux lui dire que la référence, ce sera input, ce que j'avais mis en haut dans mon YUSREF. Ensuite, lorsque je vais cliquer à ce niveau-là, je peux utiliser OnClick, et je vais lui dire, j'aimerais bien que tu utilises la méthode EndoleClick. Maintenant, si je t'habille au texte dans mon champ et que je clique sur récupérer la valeur, je vois bien que je récupère la valeur. Donc YUSREF vous permet comme ça de stocker une valeur et de pouvoir faire référence à un objet d'un homme. Mais ça peut aussi être utilisé pour sauvegarder une valeur arbitraire. Imaginons, m'invite à avoir un compteur de sauvegarder le nombre de comptages, sans forcément avoir quelque chose qui est lié à l'état. On sait pas idéal comme exemple, mais c'est pour vous montrer le fonctionnement. Donc je fais une constante que je vais appeler compteur et je ferai un YUSREF et je lui passerai comme valeur initiale, un objet qui contient compte à zéro. Lorsque je clique sur le bouton, je vais lui demander de rajouter une valeur à ce compteur. Donc là, je peux faire un compteur. PointCourrent, pointCount et j'en criemente la valeur. En faisant plus, plus par exemple. Et après, je peux faire un console pointLog du compteur. Donc l'avantage, c'est que au fil des rendus de mon composant, ça sera la référence toujours au même objet qui va être faite et je pourrai sauvegarder les informations. Donc on voit que j'ai ici la valeur courante et le compteur est à un. Si je reclique, j'aurai toujours la valeur courante et le compteur est à deux. Donc je garde comme ça en mémoire cet objet-là. Alors on pourrait se dire, finalement, là, tu utilises le YUSREF, est-ce que ça ne serait pas un peu le même principe que le YUSME MEMO ? Il faut bien comprendre que le YUSME MEMO vous permet de mémoriser une valeur, mais il n'y a aucune garantie sur le fait que vous allez systématiquement avoir la même valeur. Sous certaines situations, le réacte peut décider de effacer complètement la valeur qu'il a gardé en mémoire et dans ce cas-là, on réutilisera le callback qui est envoyé à YUSME MEMO pour re générer une valeur. Si vous avez besoin véritablement de persister une valeur tout au long de ce cycle de vie de votre composant, mieux vous utiliser YUSREF. Ça vous permet véritablement de garder une valeur et de vous assurer qu'elle ne soit pas changée au fil du temps. En tout cas, elle ne sera pas changée au sein même d'un composant. De manière générale, vous allez plutôt être amené à utiliser YUSREF pour communiquer avec des éléments dans le dom. C'est avec plus cette situation que vous allez retrouver, plutôt que la situation où on pourrait sauvegarder un objet. Mais voilà, sachez que... Vous avez cette possibilité, si vous voulez mémoriser une valeur au fil des rendus de votre composant. Et si jamais vous avez besoin d'un équivalent au CREY-TREF que l'on avait vu précédemment, c'est cette manière-là que l'on aura décré à les choses. Donc voilà, pour ce petit YUSRE, c'est très simple à comprendre et c'est plutôt pratique pour ce genre de situation. On aurait besoin d'interagir avec le dom.