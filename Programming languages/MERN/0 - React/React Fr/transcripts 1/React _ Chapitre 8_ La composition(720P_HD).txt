 Alors dans ce chapitre, je vous propose de parler de la composition et de comment utiliser les composants les uns avec les autres. Alors en la vue, pour créer des composants, on est amené à utiliser des classes qui est un de nos réexes point compagnantes. Et on peut se dire, si finalement j'ai un composant qui y a besoin des fonctionnalités dans notre composant, est-ce que je ne peux pas utiliser l'héritage de class classique de JavaScript. Alors de manière générale avec réacte, on ne nous utilisera pas du tout ça. Et je vais vous donner un exemple concret avec des boutons. Donc imaginons, on crée une fonction. Donc on va le mettre à l'hémite ici. Donc on va créer une fonction, button, comme ceci. Et à l'intérieur, on va simplement retourner à un bouton qui a comme class, attention, il faut mettre class name, BTN et BTN tirer primari. Et on se dit, finalement primari second arrêt tout ça, mieux voudrait que ça soit un paramètre. Donc dans les propriétés, on recevra le type du bouton par exemple. Donc à ce niveau là, je peux faire une constante qui va s'appeler CalasName. Et je vais dire que class name, ça sera BTN, un espace BTN tirer le type du bouton, comme ceci. Dans ce Calas, je peux lui passer ici class name. Et ensuite, je mettrai l'enfant. Donc au niveau des propriétés, j'aurais besoin aussi des enfants, Tintone, que je vais mettre à ce niveau là. Donc là, j'ai créé un petit composant qui me permet de créer un bouton classique que je peux utiliser dans n'importe quel autre composant. Par exemple, si on s'imaginait ici qu'on en aurait besoin de faire quelque chose, je peux utiliser mon composant BTN, je lui préciserai que c'est un type primari. Et ensuite, je mettrai l'intérieur, envoyer par exemple. Et là, j'aurais mon bouton bleu. Mais on se dit, ça serait pas mal d'avoir carrément un bouton qui s'appelle primari BTN. Si on avait à faire ça classiquement, on crée du JavaScript, en forêt une classe BTN qui est primari BTN qui est en vrai de BTN, par exemple. Mais avec Réal, t'en es pas obligé. On peut simplement créer un nouveau composant, que l'on va appeler primari BTN, ce composant est prendre en paramètre des enfants. Et à l'intérieur, il va pouvoir faire appel à un autre composant. Donc, lui, il pourra retourner un bouton de type primari. Et à l'intérieur, il passera les enfants. Grâce à ce système-là de composants, on va pouvoir justement composer les choses et faire une sorte d'héritage. Ce qui fait que ça rend le principe d'héritage JavaScript Placic inutile lorsque l'on travaille avec Réal. C'est très, très, très rare que l'on en est besoin. Le système de composants avec les propres, avec les propres, suffit à composer comme on l'a souhaitent. Maintenant, si je remplace mon bouton par un primari BTN, je vais obtenir le même résultat. Mais je peux très simplement me créer d'autres boutons pour des cas secondaires. Par exemple, on mettra un secondari BTN et ça sera un bouton de type secondaire. Et on compose comme ça notre propre structure et on peut changer les types de boutons. Alors, entre petits détails, on a la possibilité aussi d'utiliser des composants au niveau des propriétés. Donc, imaginons, on a envie d'avoir un système en deux colonnes. Donc, je vais me créer un composant, donc on va créer une fonction que l'on va appeler, columnne tout pour dire deux colonnes. C'est un composant, pour l'instant, il ne prendra aucun enfant. N'y rien du tout, aucune propriété. Ce qu'il va faire, c'est qu'il va retourner une dive que aura la classe Rho, je travaille ici avec bootstrap, et dedans, on aura une dive qui aura la classe, coltiré SM, tiré 6, ou coltiré MD, tiré 6, pour que ce soit en deux colonnes que sur des écrans suffisamment de large. Donc, là, il faudrait que je soit capable de lui envoyer la partie de gauche et la partie de droite. Donc, on l'a vu avec children, mais on a directement les enfants. Nous, on aimerait bien plutôt avoir une propriété pour mettre ce qu'on veut mettre à gauche et une propriété pour mettre ce qu'on en mettrai à droite. Là, j'aurai deux propriétés, une qui sera left et une qui sera right. Et j'utilise la destructuration à ce niveau-là. Left et right. Ce que je peux faire au niveau de mon composant, par exemple, calculateur, c'est lui dire, ben, ici, j'aimerais bien créer un système en deux colonnes. Donc, j'utilise mon composant Colomne 2 et je veux lui envoyer des propriétés. L'avantage, c'est que dans les propriétés, vous pouvez lui passer du texte comme on l'a vu, que vous pouvez lui passer une expression, mais vous pouvez aussi carrément lui passer un composant. Donc, je pourrais lui dire, dans la partie de gauche, je veux ce composant-là. Dans la partie de droite, je veux l'autre composant, celui qui permet de rentrer la température en Fahrenheit. Automaticement, mon composant de colonne recevra en premier, dans la propriété left, le composant de la température en Celsius et la partie de droite, le composant dans la température en Fahrenheit. Ici, je réactuise ma page. Donc, j'ai une petite erreur ici, parce que j'ai mis classe au lieu de class name. J'étais là-m'habituer à utiliser l'autre compression que ça me pose pas mal de soucis. J'espère que vous n'avez pas fait la même erreur comme moi, mais si je réactualise, on a bien sur les grandes suffisamment largees de colonne. Et vous voyez comment on peut composer les choses. Donc, c'est exactement ce qui vous est donné ici, dans la documentation, pour vous expliquer ces problématiques-là. Donc, il y a à notre exemple, dans l'orca, il montre une boîte de dialogue où vous pouvez séparer les choses. Le split pane, c'est ce qu'on vient de faire, avec une propriété ou en mesquelles on veut mettre à gauche et une propriété où on veut mettre ce qu'on met à droite. Donc, avec réacte, comme on vous le dit à la fin de cette article-là, vous n'êtes pas du tout obligé d'utiliser le principe des ritages classiques. Vous pouvez utiliser la composition pour réutiliser votre logique et faire des composants les plus spécifiques possibles à partir de composants plus génériques. Donc, voilà, comment on utilise les ritages sur réacte.