 Salut et bienvenue dans ce nouveau chapitre, je vous propose de parler des portes à I sur React. Donc les portes à I, vous vous permettez de monter une partie de votre virtual d'homme ailleurs dans le dom Reel. A pour vous illustrer l'intérêt que vous pouvez avoir les portes à I, je vous propose un petit exemple concret. J'ai ici créé une carte et lorsqu'on va cliquer sur le bouton, automatiquement ça va dévoiler une boîte modèle. J'ai utilisé ici un petit peu de style, j'ai utilisé bootstrap, mais ça va vous permettre d'illustrer le problème. Maintenant, quand je clique, je vois que cette boîte modèle s'affiche et la petite particularité, c'est que le code HTML de la boîte modèle va se retrouver dans la carte. Le problème, c'est que si on a un style particulier, par exemple une transformation, on va voir que automatiquement lorsque je clique, notre boîte modèle ne s'affiche plus correctement. On a une sorte d'overflow idone qui est partielle et ça, c'est un bug qui est lié à la manière qu'on les navigateur d'interpréter les choses. Donc moi ce qu'il me faudrait faire, c'est plutôt faire en sorte que le code HTML de ma boîte modèle ne se retrouve pas dans la carte, mais se retrouve plutôt directement à la racine de ma page HTML, directement en enfant de mon beau-dit. Mais dans mon caissie, ça me va bien que la logique se situe ici parce que c'est relativement pertinent. Donc c'est là que les portes aient intérieurs. Donc lorsque vous avez un élément plutôt que de retourner directement du virtual dom, ce que vous pouvez faire, c'est créer un portail et qui vous permettra de monter cette partie du virtual dom ailleurs. Donc la première chose que l'on va faire, c'est qu'on va l'importer. Donc moi ici je vais importer, mais ce n'est pas depuis React mais depuis React Dom, donc je vais faire un importe. Create Portal et je vais l'importer depuis React Tyredom. Donc si vous avez React Dom d'installer globalement, vous pouvez faire React Dom.cuiateportal. Ensuite, lorsque vous retournez un élément plutôt que de retourner directement votre élément, vous pouvez utiliser la méthode Cuiate Portal. Alors cette méthode va prendre 2 paramètres. En premier paramètres, ça sera l'élément React. Donc nous ici, on ne change rien. Par contre en seconde paramètres, vous allez lui passer un élément de Dom pour lui dire où il doit monter les choses. Donc moi ici c'est très simple, je vais faire un document.body. Maintenant je vais sauvegarder et je vais réactualiser ma page. Lorsque je clique sur Go Samware, on voit qu'on a plus le problème de translation. Et si je regarde le ma structure HTML, on va descendre un petit peu ça. On voit que directement on a notre partie modèle et notre modèle fake de chaud qui se situe à la racine. Donc au niveau de React, dans la partie composante, si je regarde aussi au niveau de mon inspecteur, on voit bien qu'on a notre application avec la boîte modèle qui est un enfant. Mais au niveau de mon Dom, c'est beaucoup plus éclaté et ça me permet de m'adapter beaucoup mieux la situation. Globalement, si vous voulez monter un élément ailleurs dans votre Dom, il vous suffit simplement d'utiliser la méthode create portal, de lui passer un premier paramètre votre élément React et un second paramètre, un nez dans votre Dom. Alors autre petite particularité, il faut savoir que, même si c'est branché à différents endroits dans votre Dom, les événements vont remonter. C'est-à-dire que par exemple, si je me dis ici lorsque je clique sur cet oeuvre, donc ma carte, je vais faire un point de clique. Je vais lancer une fonction qui va faire un console point de log. Là, je vais tout simplement créer une fonction log, et cette fonction, elle fera un console point de log de clique. Donc je s'avarde, je réactualise ma page, qu'un je clique ici, on va bien voir qu'un console j'ai mon clique. Si je clique sur go, ça me mouère et que je clique sur ma boîte modèle, l'événement remonte bien. Donc même si c'est à deux endroits distains dans votre Dom, le système d'événement va faire remonter notre clique, même si il est sur la boîte modèle qui se trouve ailleurs dans votre Dom. Donc c'est un moyen intéressant de monter des éléments de manière plus globale. Je pense notamment à des boîtes modales, à des messages d'alerte, par exemple, qui s'affichent sur l'impression de toute votre application. Ça peut être pertinente de la voir dans la logique de votre composant, tout en l'ayant un autre endroit dans votre Dom. Et c'est à ça que serve les portes à y sur React.