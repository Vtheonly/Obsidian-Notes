 A bienvenue dans ce nouveau chapitre, on nous allons découvrir comment un composant réacte peut manipuler ou accéder à ses enfants. Alors on peut se demander pourquoi on aurait besoin d'une telle chose. Alors un exemple concret, c'est la création de la système d'ongler. Donc moi par exemple, j'aimerais bien ici créer un composant que l'on va appeler de tâpes, ce qui va permettre de créer des anglais. Mais je ne veux pas forcément avoir à m'embêter avec la structure, ce que j'aimerais bien faire, c'est ici avoir un premier élément que je vais appeler de tâpes et ce élément aurait un titre particulier. On l'appellerait première anglais par exemple et à l'intérieur on aurait un petit peu de texte et on aurait la même chose pour un second anglais. Donc on aurait un second anglais qui aurait lui aussi un title. On l'appellera second anglais et ensuite on mettrai encore une fois un petit peu de texte. Alors on va essayer de mettre un texte légèrement différent. Donc on va juste couper le début de la phrase. Voilà, il ne se croit que ça commence pas par la même chose. Donc la particularité, c'est que notre composant de tâpes, c'est le composant qui va représenter notre système d'onglais qui va notamment avoir la barre de navigation. Il a des enfants qui, pour l'instant, ne représentent que le contenu. Mais il va falloir extraire depuis ces enfants la liste des titres pour pouvoir concevoir notre barre de navigation. Donc notre composant de tâpes va avoir besoin de manipuler les enfants pour changer complètement la structure. Alors ce qu'on va faire, c'est qu'on va créer ce composant-là. Donc on va les créer ici un nouveau fichier. On va l'appeler tâpes.gx et à l'intérieur on va exporter une première fonction qu'on va appeler tâpes. Donc pour l'instant on mettra un return et l'eau. Et ensuite à l'intérieur on va exporter aussi notre fonction qu'on va appeler tâpes qui contiendra un return word. C'est temporairement histoire de ne pas avoir de problème. Maintenant je vais pouvoir importer ces composants-là. Donc je vais importer ici tâpes et tâpes depuis tâpes.gx. Ensuite ça va pouvoir me permettre de l'utiliser. Si je réactualise ma page je vais bien avoir mon texte et l'eau. Donc si on souhaite manipuler les enfants on a la possibilité de le faire grâce à la pays de React. Donc si vous vous rendez sur la documentation de React, vous allez directement ici dans la partie référence de la pays et vous allez dans ma partie React. Donc au niveau de React si on dessin un petit peu on voit qu'on a la possibilité de transformer des éléments donc on a ce genre de fonctionnalité qui vont être très utiles mais on a aussi la possibilité d'accéder aux enfants grâce aux méthodes qui sont disponibles dans React.childrun. Dans React.childrun on peut faire un map pour parcourir les enfants, on peut faire un forage, on peut compter le nombre d'enfants et on peut faire comme ça différentes traitements. Donc nous ce qui va nous intéresser notamment c'est la fonction tourée. Donc si je regarde moi au niveau des taps je vais me dire je vais avoir besoin de recevoir en paramètres les enfants et ça j'aimerais bien regarder de quoi il en retourne à quoi ressemble cette propriété childrun. Donc je vais revenir au niveau de ma page je vais sortir ma console et je vois ici que j'ai un tableau de taille 2 et à l'intérieur je retrouve mes différents éléments qui sont des éléments React qui contiennent une propriété clé. Si je déplie on a une propriété type qui constitue l'élément React et on a ensuite une propriété aussi qui nous permettra d'accéder aux propses. Donc nous ce que l'on pourrait faire ici c'est extraire directement la propriété title. Donc boucler sur l'ensemble des enfants et récupérer les titres. Mais il faut faire attention parce qu'on ne peut pas faire ça directement comme ça. Pourquoi ? Parce que par exemple si jamais au niveau de notre app.js on avait un système de tableau. On est ici on se dirait en aurait un nouveau composant. On ferait un nouveau tableau de taille 2 par exemple et pour ce tableau là on m'a prêt. Donc on va récupérer la valeur mais ça ne nous est pas. Ce qui nous intéresse c'est l'index et on va utiliser cette index pour générer des tables à la volée. Donc comme on ferait ici. Et là on mettrai j'aimerais bien avoir. Alors il va falloir utiliser des temps play de string. Et je lui dirais, on glée numéro et je mettrai le numéro de l'onglet. Si je fais ça maintenant et que je réactualise ma page je vais voir que j'obtienne toujours un tableau à ce niveau là. J'obtienne par contre un tableau de taille 3 alors qu'on pourrait s'attendre à avoir au total 4 éléments. Et dans ce tableau j'ai un premier tableau qui contient cette première partie qui sont donc mes éléments enfants. Et ensuite une seconde partie du tableau qui contient mes deux autres éléments. Donc on le voit ce n'est pas du tout pratique. Moi j'aimerais bien plutôt avoir une représentation à plat de tous mes enfants. Connêtre tous les éléments qui sont directement enfants de taps. Donc c'est là que une première fonction va être intéressante, c'est la fonction tout oreille. Donc plutôt que de directement récupérer children je peux faire un réacte que je vais importer. D'ailleurs il n'est pas importé par défaut donc on va ici importer réacte avec un air magiqueule from react. Et je vais lui dire j'aimerais bien accéder à children et sur children je vais utiliser la méthode tout oreille. Je lui passe en premier paramètre les enfants et automatiquement hop. Si je regarde maintenant ma console il ne va plus me donner un tableau avec des tableaux à l'intérieur mais il va directement me donner un tableau qui contient l'ensemble des enfants à plat. Donc si à partir de là j'aimerais bien extraire les différents anglais c'est très simple. Je vais pouvoir le dire je vais faire un constante je vais faire un taps et je lui dire je vais faire un réacte point children. Point tout oreille et je vais prendre ses enfants et pour chacun grâce à la fonction map je vais pouvoir récupérer la propriété title. Donc je vais faire un table point props point title. Si maintenant je fais un console point log de tabs ça va me permettre automatiquement si je réacte l'image ma page d'obtenir un tableau contenant l'ensemble des titres de mes enfants. Je peux ensuite utiliser cette élément de tabs pour construire ma navigation par exemple. Donc je vais ici non plus retourner et l'eau mais je vais retourner une dive et à l'intérieur de cette dive je vais construire ma navigation. Donc la attention hop c'est navre et pour cette navigation je vais parcourir l'ensemble des tabs. Donc on va faire un tabs point map on va obtenir ici le title donc on va mettre title et ensuite à l'intérieur je vais pouvoir mettre maillot. Donc ici on va retourner ou directement hop faire comme ceci. Et je vais retourner donc un lien qui aura comme href pour l'instant on va rien mettre et à l'intérieur on aura notre title. Et comme ça si maintenant je l'actrice ma page on a bien l'ensemble de nos anglais. Donc vous voyez comment on peut utiliser cette fonction react point shield read point tour et pour inspecter les enfants et pouvoir faire des traitements particuliers comme récupérer une valeur. Donc en revanche ici il ralent parce que il me dit que chaque lien n'a pas de clé. Donc ce que je pourrais utiliser c'est directement l'index du tableau où ce que je peux faire c'est ne pas extraire directement les différentes informations. Récupérer les enfants sous forme de tableau comme ceci. Donc là ça veut dire qu'on récupera chaque enfant et l'avantage c'est que dans cette propriété enfant on peut récupérer donc directement la propre petite olle qui nous intéressait. Mais ce que l'on peut aussi récupérer c'est la clé. Donc à ce niveau là je peux lui dire j'aimerais bien utiliser comme clé et je vais réutiliser la clé de l'enfant. Donc ça sera de chide point qui. Et si je réactuise ma page encore une fois cette fois si on aura plus d'erreur au niveau de notre boucle et tout fonctionnera convenablement. Bon ici nous le sort une petite erreur mais elle est tout simplement du fait que j'avais oublié la clé à cet endroit là aussi. Voilà donc ça c'est important de la voir aussi à ce niveau là pour ne pas avoir de problème. Si le même nonan je réutilise effectivement on a plus d'erreur. Donc voilà comment on peut inspecter les enfants. Maintenant en dessous j'aimerais bien automatiquement afficher l'ensemble de mes enfants. Donc ce que je vais faire c'est que je vais créer une section et dans cette section je vais mettre l'ensemble des enfants. Donc là on va utiliser childrun-er mais on pourrait tout aussi bien utiliser de childrun vu qu'on ne fait pas de manipulation ici. Ces enfants vont utiliser table donc au niveau de table je vais pas enbêter. Je vais simplement faire un composant qui va recevoir une propriété de childrun et qui se contentera de renvoyer une dive avec l'enfant à l'intérieur. Donc directement notre texte. Là ça va nous permettre d'avoir le texte de chacun de nos anglais qui vont être l'un de sous l'autre. Mais moi ce que j'aimerais bien faire c'est être capable de dire que un anglais va être sélectionné et les autres non. Et il faudrait que automatiquement l'onglais qui est sélectionné soit visible et les autres non. Donc là ce qu'on va faire c'est qu'on va s'imaginer que table va prendre une nouvelle propriété qui va s'appeler sélecte. Qui permettra de savoir si l'onglais est sélectionné ou non. Si l'onglais est sélectionné, dans ce cas là on va le laisser visible mais si l'onglais n'est pas sélectionné, on va dire que idone. Donc c'est une propriété HTML5, un attribuage HTML5. Si c'est différent de sélecte l'élément sera masqué. Donc là ce que je peux faire c'est au niveau de mon app.gs par exemple, lui dire cet élément-là par exemple sera sélectionné. Vu qu'il sera sélectionné c'est cet élément-là qui sera bien visible. Et moi j'aimerais bien faire autre chose. J'aimerais bien que automatiquement le système aille sélectionné le premier anglais et je ne veux pas manuellement moi avoir besoin de changer les choses que je mets à ce niveau là. J'aimerais bien que ça se fasse vraiment automatiquement. Donc ce qu'on va faire c'est qu'on va conserver la clé de l'élément qui est actuellement sélectionné. Donc on va faire un conste qui est égal, children, array et on va prendre le premier élément et on va extraire sa clé. Donc ça d'ailleurs on va pas l'appeler qui parce qu'on va s'immélanger les penses sous sinon on va l'appeler courante par exemple. Et ce qu'on va faire c'est qu'on va le sauvegarder dans l'état comme ça ça va nous permettre de le changer plus tard. Donc on va récupérer une méthode qui permettra de changer l'élément courant et on nous utilisera ici le UseState. UseState voilà et on emportera donc UseState de plus react. UseState impeccable. Maintenant on est embêté parce qu'on aimerait bien pouvoir lui dire ici il faudrait que tu rajoute la propriété selective à l'enfant qui est couramment sélectionné. Alors si on regarde au niveau des enfants on avait bien une clé qui s'appelait Props donc on pourrait être tenté de vouloir modifier une propriété. Par exemple on pourrait se dire ici je ferai un children array, je vais prendre l'élément à l'endex0, je vais récupérer ses Props et manuellement je vais venir faire un sélectide et lui donner la valeur trop. Si j'essaie de faire ça et que je ne réalise ma page encore une fois on va se retrouver avec une petite erreur en console où on va nous dire je ne peux pas rajouter de propriété, donc une propriété selective à l'objet, l'objet n'est pas extensible. Donc il faut savoir que les enfants que vous recevez au niveau de react ne peuvent être modifiés, donc vous ne pouvez pas changer la valeur ici d'une propriété à la voulée. En revanche je veux que vous avez le droit de faire et c'est ce qu'on avait vu dans la pays c'est clonner à l'élément, donc vous pouvez prendre un élément et le clonner pour pouvoir créer une nouvelle version et l'avantage c'est que lorsque vous clenez à l'élément vous pouvez changer ces Props mais vous pouvez aussi changer ces enfants. Donc moi ce que je vais faire ici c'est que je vais tout simplement recréer l'ensemble de mes éléments et l'élément qui a la clé qui correspond à la valeur de courante je vais changer sa propriété. Donc ici je vais créer une nouvelle constante qu'on va appeler une new children. Je vais lui dire tout simplement de prendre le tableau d'enfants donc je vais faire une children heureux, je vais m'appeler dessus et je vais récupérer chaque enfant. À l'intérieur ce que je vais faire c'est que je vais retourner donc réacte point clone élément donc je vais créer une nouvelle version de l'élément donc l'élément c'est child et je vais lui passer une propriété sélective qui aura comme valeur true si l'élément est l'élément courant donc je vais lui dire si child point key est égal à courante. Et là j'ai donc un tableau qui contient de nouveaux éléments qui sont des clones des éléments que j'ai reçus en paramètres avec la propriété sélective qui vaut true si l'élément est sélectionné et false sinon. Donc maintenant dans ma partie section plutôt que d'utiliser directement ma monde chindrun-eré je vais utiliser mon tableau de nouveaux éléments. Si je reviens au niveau de ma page on voit bien que seul le premier élément apparaît donc ce qui nous reste plus qu'à faire c'est gérer le câblage à ce niveau là. Donc ce qu'on va faire c'est qu'on va lui dire lorsque tu cliques sur un de ces éléments là on va plutôt créer des buttons j'aimerais bien que tu sélectionnes le bon élément donc on va lui dire on clique tu vas utiliser une fonction et cette fonction elle fera un 7 courante et tu mettra comme valeur la clé. La clé de l'enfant qui est actuellement parcourue et j'ai oublié de changer la balise fermante ce qui forcément ne va pas nous donner bien oui je vais peut-être aller à la ligne pour un poil plus de clarté parce que ça commence à être un petit peu compliqué à lire voilà. Donc si je réactualise maintenant ça fonctionne correctement. Si je clique sur l'anglais un je ne vais pas forcément de changement de texte lui qu'on avait une mille même texte mais si je clique sur seconde la fin on voit bien que le texte change donc la notre système est capable de gérer les différentes anglais. On va peut-être mettre un petit peu de texte pour différencier si vous voulez bien donc là on va mettre un index on va mettre un cas et là on va mettre première anglais suivi du loramipsum. Voilà ça nous permettra au moins qu'on clique grâce aux choses de pouvoir faire la différence et là on voit bien que ça fonctionne convenablement. Ce que l'on pourrait aussi faire c'est donner des clés particulières à certaines de nos anglais par exemple ici on l'appellerait premier et au niveau de notre taps mettre directement une propriété sélective si on voudrait spécifier les éléments qui est sélectionnés par défaut. Et dans ce cas là c'est ce système là qui prendrait le relais et il faudrait écouter qu'un y aurait des changements pour pouvoir changer la valeur de sélective et changer les anglais qui est couramment sélectionné. Donc là ça veut dire faire un petit peu plus de logique je vous mettrais ça dans le code source du tutorial mais voilà c'est des pistes que vous pouvez explorer si vous voulez avoir un système d'onglais qui puisse être contrôlé depuis l'extérieur. Mais ce qu'il faut retenir dans cette vidéo c'est vraiment cet appellil. Donc React Point Children va contenir un ensemble de méthodes qui vont permettre de manipuler les enfants donc on va pouvoir utiliser tout à ré notamment pour récupérer un tableau à plat des éléments et on va pouvoir ensuite faire des traitements particuliers. Donc ça peut être pratique comment l'on a vu ici pour ce système de navigation pour extraire des informations. Ensuite si jamais on souhaite parcourir les enfants et les manipuler pour pouvoir modifier certaines propriétés par exemple on va pouvoir utiliser la méthode clonélément. Clonélément va permettre de créer un nouvel élément dans lequel on va pouvoir injecter des propriétés ou des éléments enfants. Et voilà comment on peut faire ici un système qui a une apérie qui relativement simple à utiliser. Donc on voit qu'on a un système d'onglais qui va avoir des anglais enfants et c'est simple à gérer. Peut-être un petit détail faites attention si vous utilisez les fragments. C'est à dire que si vous vous dites tiens genre bien utiliser un autre composant qui lui aurait des fragments et injectorait des taps. Lorsque vous allez faire un React Point Tourer, vous n'allez pas récupérer les éléments à plat. Si je fais un console point log de children arey et que je réactualise, on va voir que là on obtient bien un tableau de taille 3 parce qu'il considère que l'élément à l'index 0, ce n'est pas tout simplement un tableau qui pourrait être aplatis, c'est un fragment. Donc si vous voulez vraiment récupérer les éléments à plat, il faudrait ici rajouter un petit peu de logique pour se dire que si un élément est un fragment dans ce qu'il a, je récupère directement cette children et c'est cette children que je vais rajouter à mon tableau. La méthode Tourer ne va pas aplatir si on a un fragment. Elle n'a plate que si on a des enfants qui sont directement des tableaux. C'est un détail mais c'est important si vous composez vos éléments à partir d'autres composants. Autre détail important, vous ne pouvez pas mémobiliser un composant qui utilise ce système d'enfant. A chaque fois que vous faites une manipulation, dès que le composant A, ici, va être rendu, automatiquement vu qu'il reçoit de children, ce composant-là ne peut pas être mémobilisé parce que les enfants vont changer systématiquement. Même si effectivement les deux ne changent pas, c'est-à-dire que c'est le même type et c'est les mêmes props, lui il va voir que children est un nouveau table. Donc ça ne peut pas être mémobilisé. Donc si vous utilisez ce type de manipulation, ça peut avoir cet inconvénient-là de ne pas être mémobilisable. Donc si jamais vous avez un liste qui contient beaucoup d'éléments, il faudra faire attention à votre traitement à ce niveau-là. Donc voilà pour cette petite vidéo, c'est quelque chose que je trouve très utile dans certaines situations. Dans le cas d'un système d'onglet, je trouve ça très pratique parce que ça permet de manipuler les choses. Ça peut aussi être utilisé par exemple pour un select. Moi ce que j'aime bien faire, c'est créer un système de select personnalisé. Donc en général je fais un composant select qui prend en paramètre une valeur. Donc ici on va mettre la valeur 1. Ensuite je crée des options et j'imite vraiment la pays, on va dire HTML, on va mettre ici élément 1 et ensuite on aura l'élément 2. Et ce que je fais, c'est que automatiquement je utilise ici la valeur qui est passée à mon select pour savoir quel élément et quelle option doit avoir une valeur selectie. Lui automatiquement récupérera une propriété selectique qui sera injectée dynamiquement grâce à la valeur qui est spécifiée à ce niveau-là. Donc là j'ai besoin effectivement aussi de cette communication et j'ai besoin que le select puisse manipuler les composants en fin. Après vraiment comme vous l'avez vu, c'est à utiliser dans des cas limités, n'allez pas utiliser tout à ré pour aller explorer l'ensemble de votre arbre parce que ça peut devenir compliqué. Mais dans le cas où on a vraiment une communication comme ça à un niveau, ça peut être très pratique. Donc j'espère que ça vous aura permis d'y voir un petit peu plus clair sur ces appels-là. Si vous avez d'autres questions sur d'autres éléments qui sont disponibles dans la pays ici, n'hésitez pas à poser des questions. Je vous pourrais vous faire d'autres vidéos pour vous expliquer dans quel cas ça peut être utile et dans quel cas ça peut ne pas l'être. Donc sur ce je vous dain-en-dévou dans les chapitres suivants.