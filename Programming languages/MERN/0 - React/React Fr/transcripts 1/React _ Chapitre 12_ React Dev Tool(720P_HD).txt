 Bienvenue dans ce nouveau chapéry, trouvez-nous à l'autre d'un ensemble l'outil React DevTool. Donc lorsque l'on travaille avec React, il peut être parfois assez difficile de savoir où on en est, pourquoi les différents rendus sont déclenchés et connaître les propriétés des différents composants. Donc heureusement pour nous, on a un outil qui est plutôt intéressant sur les navigateurs qui est le React DevTool. Donc cette outil est disponible sous forme d'une extension que vous pouvez installer sur votre navigateur. Donc dans le cas de Far of Rock, si vous suffisiez simplement d'aller dans la partie préférant sans haut, vous allez ensuite dans module complémentaire et vous cherchez React. Vous devriez tomber sur le React Developer Tools. Donc vérifiez bien que c'est l'extension qui est créée par React et vous cliquez sur ajouter à Far of Rocks. Vous acceptez les différentes permissions et vous choisissez si vous voulez l'activer ou non dans la partie navigation privée. Je ne faut pas trop d'intérêt à ça, donc je clique sur G compris. Automatiquement maintenant, lorsque vous allez vous rendre sur une page qui utilise React avec React en mode de développement, lorsque vous allez sortir votre inspecteur, vous allez avoir deux nouveaux anglais qui vont être à droite qui seront React Component et React Profiler. Alors ici pour une raison que Gignon ce n'est pas disponible, c'est sûrement du un bug dans la version qui est actuellement disponible, donc je vais vous montrer la version sur Chrome. Si vous êtes sur Chrome, la procédure est la même, vous allez dans la partie préférence, vous allez ensuite dans plus d'outils et extension. Vous allez choisir de rajouter de nouvelles extensions, donc vous allez ouvrir le web Chrome Store et vous cherchez React. Donc là encore une fois, faites bien attention à trouver l'extension qui est développée par Facebook. Je clique sur Ajouter à Chrome, je clique sur Ajouter l'extension et c'est fait. Je ne vais pas activer la synchronisation ici et on voit qu'on a cet icon qui apparaît un haut. Donc cet icon par des fois, elle va être au pack comme ça, si la page sur laquelle vous êtes n'utilise pas React. Si je réactue l'ise de cette page là, on voit que l'extension devient orange et on a dans notre inspecteur, la partie composant est profileur. Chose que vous devriez avoir aussi d'un form of fox. Si vous allez sur une page qui utilise React en mode production, donc on va aller par exemple sur React. GES, tout simplement, on va se rendre sur la documentation. On voit que l'icône apparaît un bleu ici. Ça, ça veut dire que React a été à importé un mode production. Donc faites très attention à ça. Si vous avez l'icône en rouge, je sais très bien pendant la phase de développement, mais vous ne devriez pas l'avoir en rouge orange, lorsque vous mettez ça en ligne sur votre site internet. Si non, ça veut dire que vous avez importé la version des bugs et ce n'est pas une bonne chose. Alors, qu'est-ce que apporte cette extension là ? Elle va apporter ces deux onglais. Donc le premier va vous permettre d'inspecter votre arbre en regardant les différentes composants. Donc c'est un petit peu comme l'inspecteur que l'on a ici pour les éléments dans le dom, sauf que ça nous permet d'inspecter les éléments que l'on a au niveau de React. Alors, vu que dans le précédent chapitre, on avait juste créé un composant simple, je vais refiner un arrière et je vais réouvrir l'exemple avec le listing produit, parce qu'il aura un peu plus de composants et ça sera plus intéressant. Voilà, et je vais lui demander de démarrer le live-server plutôt pour ce projet. Donc je réactualise ma page, j'ai bien mon listing produit, et si je vais dans l'onglet composant, je vois bien l'ensemble de ma structure. Donc si je clique sur un de mes composants, je peux voir les différentes propriétés qu'ils reçoit, donc là par exemple le producte table, on voit qu'il a un filter texte qui est vide et un Instacon-le-EA false. Et je vois aussi les produits. Si je regarde search bar, c'est pareil, je vois les propriétés. Si je regarde mon filterable producte table, j'ai en plus la possibilité d'inspecter le state. Si je viens à modifier quelque chose, par exemple je vais chercher foot, on voit que le filter texte a été mis à jour et ça me permet d'inspecter l'état de mes composants, beaucoup plus simplement, qu'au par avant. Vous avez aussi la possibilité de configurer l'apparence de cet inspecteur, donc vous pouvez cliquer ici sur View Settings. Vous pouvez changer le thème, vous pouvez changer la présentation, vous pouvez cocher cette case-là, donc ça c'est très intéressant, ça vous permet en fait de faire clignoter les éléments lorsque ils sont mis à jour. Donc on va sélectionner ça. Donc ça, ça permet d'avoir plus d'informations lorsque vous avez des erreurs à un console, c'est pratique. Donc dans l'onglet Component, vous pouvez choisir de filtrer et de retirer certaines composants. Donc ça, ça peut être intéressant surtout quand on parlera des contextes ou ce genre de choses, ça vous permet d'enlever des composants qui ne sont pas utiles pour votre débug. Et dans la partie Profiler, c'est la partie que l'on verra juste après, vous pouvez enregistrer à chaque fois qu'un composant a été rendu et pourquoi. Donc ça, on va le cocher parce que ça peut être intéressant. Donc je vais fermer ça et maintenant je vais taper bol, par exemple, et on voit que ces composants-là sentent autour d'une petite bordure. Pour nous dire, j'ai été rendu, j'ai été rendu. Donc c'est très intéressant. Alors après, à droite ici, vous avez la possibilité de bloquer un composant. Vous pouvez l'inspecter. Donc ça, ça vous montre directement où il se trouve dans le dom, où est-ce qu'il a été monté. Vous pouvez le débuguer. Donc là, tout simplement, ça va créer une variable ony vote votre console qui contiendra votre composant. Si j'en regarde dans la partie console, j'ai maintenant ce composant-là et je peux inspecter les différentes valeurs. Et je peux aussi, si je souhaite, se regarder ça dans une variable global. Donc ça peut être intéressant si vous avez besoin d'aspecter des choses particulières et enfin, le dernier anglais va vous permettre d'aspecter dans le code source. Donc ça vous montre où, dans le code, ce composant a été défini. Donc ça, c'est un anglais qui est super, super pratique à ce niveau-là. L'anglais profiler est un anglais qui va vous permettre d'observer les performances un petit peu comme l'anglais profiler de votre navigateur. Alors, pour vous illustrer le problème, on va reproduire un petit peu la chose qu'on a régue la dernière fois avec la fonction wait. On va s'imaginer que pour générer un produit, je vais faire un petit wait et attendre 400 millisecondes. Mais on s'imagine qu'on a oublié qu'on a les essais ça quelque part et on aimerait bien comprendre maintenant pourquoi notre interface est lente. Donc ce que vous pouvez faire avec le profiler, c'est cliquer sur un registré et ensuite vous faites vos actions. Donc là, c'est mégallant. Et ensuite, je clique sur stop profiling. Automaticement, ça va me montrer cette représentation en cascade qui me permet de voir quelle est le temps de rendu pour chaque élément. Et on va avoir en haut les différents moments où il a fait un comite. Et on voit que dans ce cadre-là, on a une grosse zone en jaune qui nous dit qu'il a une durée assez longue de 400 000 et secondes. Si on regarde ces flamerares, on voit que par défaut, ce composant-là il a été rendu très rapidement, celui-là aussi, mais c'est celui-là qui est tout en bas le producte d'euros qui a mis 400 000 et secondes à ce rendre. Et si je clique dessus, on peut m'expliquer pourquoi il a été rendu. Donc ça, c'est ce que l'on a activé quand on a cliqué sur cette case-là. Donc là, il me dit ce composant a été rendu parce que un des parents, parce que le parent a été rendu. Ce qui est effectivement le cas, c'est le producte table qui a déclenché un nouveau rendu. Et pourquoi le producte table a été rendu parce que une de ses propriétés a changé. Vous voyez, ça vous donne beaucoup, beaucoup d'informations sur les raisons des rendus et sur des séventuels problèmes de performance. Juste si on regarde, si je clique sur un registré et que je retire ce filtre-là, voilà. On voit que le graph ici nous dit, bon, mais pour rendre le producte table, un vrai juste producte table, ça meit 4,024 000 et secondes, mais l'intérieur a mis 2 secondes 4 et je vous voyez effectivement que nos producteurs au sont trop trop lent. Donc ça me donne une bonne indication sur ce que je dois optimiser. J'ai un problème de rendeur au niveau de ces composants-là et donc c'est ce composant-là qui est faute-y. Vous pouvez aussi avoir un autre affichage qui est rank chart. Donc là, c'est tout simplement un graph qui va vous montrer les temps de rendu organisés du plus lent ou plus rapide. Donc ça peut vous permettre aussi de d'inspecter et de voir très rapidement les éléments qui sont problématiques. Donc si je corrige mon problème en retirant mon weight et que je relance un petit un registrement, je t'appel foot, je stop. Je vois que maintenant c'est beaucoup plus rapide et effectivement on est sur du 0,2m2. Donc si jamais vous avez des problèmes de performance, c'est des rendus qui seront faits trop souvent, n'hésitez pas à utiliser ce profilur. Ça peut vous permettre de comprendre pourquoi un composant était rendu et ensuite comprendre les éventuels composants qui mettent trop de temps à être rendus. Si vous avez besoin d'inspecter l'état de vos composants, il faudra plutôt aller sur l'onglet Component et inspecter les différentes composants comme ceci. Et si vous avez besoin de rechercher un composant rapidement, vous pouvez cliquer sur ce petit élément-là qui ressemble à cette icône-là. Ça vous permet d'inspecter un élément mais pas d'inspecter un élément dans le dom, mais plutôt de trouver le composant qui est associé. Donc voilà pour cette extension-là, elle est indispensable dès lors que l'on travaille avec React et elle continue de s'améliorer au fil des mises à jour. Donc n'hésitez pas à l'utiliser si vous avez besoin d'inspecter votre application React ou de comprendre les pommes éventuels problèmes de performance.