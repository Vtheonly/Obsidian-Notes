 A bienvenue dans ce nouveau chapitre où je vous propose de découvrir un autre outil qui va nous permettre de travailler avec réacte et cet outil c'est par celles. Par celles c'est un bonheur qui permet de gérer différents types de fichiers et de les compresser en neuf fichiers en sortie. Le gros avantage qu'il va avoir c'est que c'est un outil qui demande absolument aucune configuration et qui, en fonction de la structure de votre projet, va être capable de se débrouiller. Donc c'est très bien surtout quand on début. Alors pour l'utiliser comme pour l'outil CREATE REACT UP, il va nous falloir notre GS et je vais supposer ici que vous l'avez déjà installé sur votre système. Une fois que c'est fait, pour le découvrir, je vous propose de créer un nouveau dossier et à l'intérieur on va créer un premier fichier que l'on rappelait index.html. À l'intérieur de ce fichier, je vais mettre mon template HTML5 standard, je vais aller mettre bien un petit peu plus de place comme ça. Et on va mettre à l'intérieur de notre body une dive qui aura comme IDUP. À l'intérieur de cet HTML, on peut charger n'importe quel type de fichier et même des fichiers qui ne seraient normalement pas supportés par les navigateurs, comme par exemple du GSX. Donc je vais l'écrire un dossier que je vais appeler SRC et dedans je vais créer mon index.gss. Je mets GSX pour que mon éditeur comprenne que je travaille avec CREATE, mais aussi que le bon de l'heure puisse si repérer beaucoup mieux. À l'intérieur, je souhaiterai utiliser REACT DOM et utiliser la méthode RENDER pour rendre mon élément. Donc l'avantage avec par celles, c'est que je vais pouvoir installer REACT et REACT DOM via le gestionnaire de paquet. Donc j'utilise ici YARN, mais ça fonctionne avec la même manière si vous utilisez NPM. Donc je fais un YARN, AD, REACT et REACT DOM. Mais justement, je vais initialiser l'office et paquet de point de gestion, en faisant YARN INIT, TIRYGREC. Vous pouvez faire un NPM INIT, TIRYGREC, vous allez obtenir le même résultat. Ensuite, je fais un YARN, AD, REACT et REACT, TIRYDOM. Maintenant que c'est installé, je peux l'utiliser dans mon fichier GX, je peux faire un INPORT et j'ai un port de la fonction RENDER depuis REACT TIRYDOM. Une fois que j'ai cette fonction, je lui demande de faire un RENDER et je vais pouvoir écrire du GX. Donc on va simplement mettre une dive qui dira ELEWORTE. Et ensuite, je lui demande de rendre ça sur l'élément qui a LID, UP. Maintenant que ce fichier est créé, au niveau de mon index.html, je vais pouvoir changer mon JavaScript. Donc je fais un script, SRC égal et je lui demande d'aller chercher le fichier qui se situe dans SRC et qui s'appelle index.gx. Donc ça, comme on l'a dit, ce n'est pas quelque chose qui sera compris par l'inavigateur, mais grâce à par celles, ça va fonctionner. Et je vais rajouter des feurs pour que ce code soit exécuté après le chargement de mon HTML. Donc si on soit utilisée par celles, il va falloir l'installer au niveau de notre projet. Donc on fait un Yarn, AD, tirer D pour dire que c'est une dépendance de développement par celles, tirer BUNLOR. Automaticement, il va installer BUNLOR ainsi que les différentes souhaites pendant. Et il y en a pas mal. Donc laissez ça secouer. Et une fois que c'est fait, on peut faire un coup de NPX par celles et on va lui donner le fichier d'entrée. Donc notre fichier d'entrée, c'est index.html. Si vous l'avez dans un dossier, mais faut à taper à notre dossier. Automaticement, il va démarrer un serveur de développement sur le port 1234. Donc si sur mon navigateur, je fais localhoste 2.1234, je vais bien voir ma page, qui pour l'instant est une page blanche. Je vais sortir mon inspecteur et aller dans ma partie console. Donc là, il me sort une erreur en me disant que réactes n'ont de Difint. Donc attention, lorsque vous écrivez du VSX, ce code-là sera remplacé par des appels à réactes.q et les mêmes. Donc pour que ça fonctionne qu'on venait de l'appeler, il faudra importer au niveau de ce fichier réacte. Donc je fais ça, et maintenant dès que je s'obgarde, il va automatiquement réactuer la page et réafficher les choses. Et on voit bien qu'on a un autre et le word ici. Ce qui est intéressant avec par celles, c'est qu'il est capable de travailler aussi avec d'autres types de fichiers. Donc je peux ici, par exemple, lui dire, j'aimerais bien importer un fichier qui s'appelle index.html. Ce fichier, je vais aller le créer. Et dedans, je vais simplement dire que pour mon body, je voudrais un pas grand qui serait vers. Et automatiquement, lorsque je vais sauvegarder, il va comprendre ça et recharger ma page. Alors là, ça ne fonctionne pas parce qu'il y a eu une erreur qui a été bloquante. Donc je vais re-sauvegarder ce fichier-là pour qu'il recompile et maintenant, on voit bien que notre font est vers. Le gros avantage de ce système-là, c'est qu'il est capable de recharger votre 16s sans recharger la page. Si par exemple, je venais à modifier ce code-là et que je change le 16s pour mettre du rouge, on va voir qu'il change le 16s sans réactualiser. Donc c'est très intéressant pour des composants qui sont un petit peu compliqués et pour lesquels vous avez envie de changer le style, sans fortement, c'est mal de voir au refaire toutes les opérations. Et là, on a la configuration de part défaut lorsqu'on va développer. Maintenant, qu'est-ce qui se passe lorsque je veux produire mon fichier? C'est-à-dire que j'aimerais bien publier mon application réacte et ma page que j'ai créée. Donc on va couper ce système-là, faisant une contrôle C, et on va supprimer le dossier-diste. C'est le dossier avec les fichiers de développement. Maintenant, je peux lancer la commande par celles, mais un rajoutant de build avant le fichier, un texte.html. Dans ce cadre-là, il ne va pas lancer un serveur de développement, mais il va tout simplement construire vos fichiers. Dans le dossier-diste, je vais avoir mon fichier JavaScript qui va être tout minifié. Alors attention, quand vous l'ouvrez et que votre éditeur ça peut être un petit peu lourd. Vous allez avoir votre fichier SSS qui va être aussi minifié, et vous allez avoir votre fichier index.html qui va être minifié avec des références convenables vers le fichier JavaScript avec ce petit H, qui permet d'offrir le cache, et le fichier SSS avec le H aussi. Donc c'est très intéressant parce que vous voyez par celles vous permet de travailler avec le minimum des forts et le minimum de configuration, et ça c'est plutôt intéressant. Alors maintenant, je vais vous montrer une petite fonctionnalité qui va arriver avec la version 2. Donc à l'heure à laquelle j'enregistre cette vidéo, la version qui s'installe quand vous faites une installation de parcelles, c'est la version 1.12. Mais il faut savoir qu'il y a une version 2 qui est en préparation, qui est actuellement en alpha, et qui offre des fonctionnalités intéressantes. Alors je vais copier du code que j'ai écrit séparément, qui permet de créer une liste. Donc je le copie tout simplement parce que dans ce code-là, j'ai utilisé des Wook et c'est ce que l'on verra dans le chapitre suivant. Donc vous en faites pas, c'est juste pour vous démontrer quelque chose. Là au niveau de ce index.gx, après avoir mis mon e-loor, je vais charger le composant que j'ai créé dans le fichier liste. Donc je vais faire un importe, je vais importer liste. Depuis mon fichier liste.gx, pas besoin de mettre d'extension, et juste après mon e-loor, je vais écrire maliste ici. Donc c'est un simple composant qui permet d'afficher une liste avec un bouton permettant de rajouter un édévin. Pour tester ce composant, je vais relancer mon parcels en mode développement. Donc je réactualise la page, et j'ai bien mon système qui permet d'ajouter des éléments. Le petit problème que l'on a de manière générale quand on va travailler avec React, c'est que si jamais j'ai envie de modifier le template, par exemple j'ai envie de changer ça et rajouter un e lorsque je vais sauvegarder, il va réactualiser la page. Et vu qu'il réactualise la page, j'ai perdu l'état de mon composant, et il faut que je refasse les différentes étapes pour arriver à la même... Au même niveau, ce qui peut être un petit peu compliqué, surtout si vous avez des composants avec beaucoup de logiques. Donc ce que va permettre de faire parcels 2, c'est de mettre en place ce que l'on appelle le fast-refresh. Donc le fast-refresh, c'est un système qui permet de raffraîchir un composant sans forcément perdre son état. Pour vous faire une petite démonstration, je vais supprimer de ce projet par celles. En faisant un yarn, remove par celles, tirer bain de l'heure. Si je veux utiliser la version 2.0 de par celles, il faut que je fasse un yarn, add, tirer et dé, par celles, arabes et n'extre. Comme ceci. Pendant qu'il est en train de s'installer, je vais supprimer le dossier d'iste et supprimer le dossier de cache. Donc cette version 2 de par celles intègre de nouvelles fonctionnalités, mais comme je vous l'ai dit, l'étendale faible. Donc elle contient encore quelques bugs. Donc vous pouvez essayer de l'utiliser, mais si jamais vous rencontrez le moins de bugs, il faudra revient vers la version 1. Le gros avantage, c'est que cette version 2 supporte cette fameuse feature qui est le fast-refresh. Je vais relancer par celles. La ligne de commande fonctionne toujours de la même manière. La présentation d'interminale est légèrement différente, mais c'est les mêmes fonctionnalités. On voit que ça génère le même dossier d'iste et ça fonctionne de la même manière. Si je réactualise la page, ça fonctionne bien. Et si je change mon CSS, ça se change bien en live. La particularité, c'est que si j'ajoute des éléments ici et que je me dis tiens, j'aime bien changer ce composant-là pour ajouter un e à notre bouton. Dans ce que je vais sauvegarder, vous allez voir que le composant va se rafraîchir sans que l'état est échangé. Et ça, c'est très intéressant pour débugler les choses parce que vous pouvez changer la structure de votre composant. Par exemple, on pourrait utiliser des dives plutôt que des UN. Et on peut voir en live les changements. Sans forcément avoir besoin de refaire les différentes opérations que l'on a fait. Et ça, c'est très très intéressant pour débuguer. Par contre, ça ne fonctionne qu'avec la pays des OUK, que l'on verra dans les chapitres suivants. Mais voilà, si jamais vous voulez avoir cette expérience de développement, sachez que ça peut fonctionner, mais qu'il vous faudrait utiliser par celles 2 et les OUK au niveau de votre fonctionnement avec Réert. En dehors de ça et pour la suite de cette formation, ça n'a pas vraiment d'importance. Vous pouvez utiliser par celles 1, il n'y a aucun problème. De toute façon, nous on rechargera la page à chaque fois. Mais voilà, comment vous pouvez utiliser par celles pour travailler avec Réert. La seule chose qui nous vous fait, c'est créer un fichier index.html qui sert de fichier d'entrer. Et ensuite, à partir de l'armes, peut charger n'importe quel type de fichier. Automatiquement, c'est par celles qui va se charger de savoir ce qu'ils doivent utiliser pour convertir vos fichiers et les faire fonctionner au niveau de votre navigateur. Donc c'est une alternative intéressante selon moi à Cui-Eye Tray Act App et qui a surtout l'avantage dans la version 2 de supportez les fonctionnalités de Fast Refresh. J'espère que cette vidéo vous a plu et je vous donne rendez-vous dans le prochain chapitre où on va justement attaquer ce système de OUK.