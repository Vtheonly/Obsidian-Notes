 Bienvenue dans ce nouveau chapitre, je propose de mettre en pratique tout ce qu'on a vu depuis le début de cette formation à travers un exemple concré. Donc notre objectif, ça va être de créer une application qui sera un petit peu plus proche de ce que l'on retrouvera dans un quart réel. Donc notre objectif ici, c'est de créer une application qui va permettre de gérer des recettes de cuisine et qui va permettre de persister ces recettes sur un serveur. Donc je vous ai déjà créé la partie serveur que je vous fournirai et votre objectif, c'est de communiquer avec ça. Donc par des fois, on aura un système de connexion, donc on lui dirait pour ce système les coups qui tout simplement. Lorsque on se connecte, ça nous permettra d'accéder à la liste des recettes, on aura la possibilité de consulter n'importe laquelle de ces recettes et de l'éditer en live. Donc par exemple, je peux changer ici le nombre d'ingrédients. Automaticement, lorsque je sauve garde, les données sont persistées sur le serveur et si je réactualise la page, la recette a bien été mise à jour. J'aurai aussi la possibilité de gérer les ingrédients, donc les ingrédients sont utilisés dans les différentes recettes et je pourrais gérer le nombre de l'ingrédients ainsi que l'unité qui est utilisée dans les recettes. J'aurai évidemment la possibilité de supprimer et d'ajouter de nouveaux ingrédients. Enfin, on aura la possibilité d'ajouter de nouvelles recettes avec un formulaire qui est similaire au formulaire d'édition de recettes. Donc on peut choisir différents ingrédients, leur quantité et automatiquement créer la recette. Pour persister les informations, on va directement utiliser ici un serveur. Moi, j'ai créé une application en utilisant le frein morque, notre GS Adonis, et vous avez une appelle qui vous permet de consulter les différents recettes. Donc c'est sur le endpoint slash recites. Vous allez avoir une appelle pour consulter une recette en particulier. Donc par exemple, si je veux voir la recette numéro un, je pourrais faire slash un. Et je vais avoir la même chose pour les ingrédients. Donc pour le coup, c'est une appelle qui crude relativement classique. Pour me connecter, il faudra que j'appelle le endpoint slash login en lui passant le user et le password. Donc de toute façon, on reviendra sur la communication avec sa fait à pays tout au long de cette formation. Alors avant de commencer et de nous encerter être baissé dans le code, ce qui est important de faire, c'est de réfléchir un amont à la structure qu'on va adopter. Donc je vais revenir sur la page d'accueil, et on va mettre ça sur le côté, hop ! Et on va mettre notre éditeur ici. Ensuite, sur mon éditeur, ce que je vais faire, c'est que je vais créer un petit document pour me permettre de réfléchir à la structure. Donc je vais créer un nouveau fichier et je vais préciser que c'est du markdown. Et on va réfléchir à l'ensemble de nos composants. Donc d'abord, le premier composant que l'on va avoir, c'est le composant application qui va contenir l'ensemble de notre application. C'est toujours notre structure de base. Dans ce composant application, on va avoir deux choses. Soit on aura notre application de tel qu'on le voit ici, soit on aura le familiar de connexion. Ce qui veut dire que cette application a la besoin d'un état pour savoir si l'utéateur est connecté. Donc on aura à l'intérieur une variable d'état qui s'appellera user qui contient l'utilisateur. Alors ensuite, on va avoir deux composants principaux. Un premier qui sera le familiar de login. Donc on va l'appeler loginforpe. Alors ce composant, il va avoir besoin de communiquer avec le composant parent, hop, l'état de connexion. Donc lorsque on va cliquer sur ce connecté, il va faire un petit traitement. Et si l'utilisateur est bien connecté, on devra faire remonter l'état pour que app soit au courant de l'utilisateur. Donc là on va s'imaginer qu'on aura une méthode, on connecte qui permettra de faire remonter l'information. Moi je choisis des petits symboles. C'est rien d'officiel, c'est juste pour moi me me repérer. Quand je mets un signo comme ça, c'est pour faire remonter de l'information. Et quand je mets un signo comme ça, c'est pour faire descendre de l'information. Voilà, c'est pour faire la différence entre l'estate et les propses. Ensuite, on a le reste de notre application. Nous on va appeler ça site, c'est vraiment notre site ou notre système de recette. Vous pouvez aussi l'appeler Rysypes ou comme vous voulez. Donc à l'intérieur de ce site, on va avoir besoin de savoir sur quel page on est. Est-ce qu'on est sur la page d'ajout ou est-ce qu'on est sur le listing des ingrédients ou sur la partie recette? Donc on va avoir au niveau de l'état la page sur laquelle on est. Alors nous ici, on va utiliser un système d'état, mais ce que l'on pourrait aussi faire, c'est utiliser l'URL pour connaître cette information. On pourrait changer l'URL pour que quelqu'un ne nous passe un lien, automatiquement, ça pointe vers le pont d'endroit. Donc nous on va rester sympathici, on va créer une variable d'étapage. Ensuite, on va réfléchir aux différents panneaux que l'on va avoir. Donc d'abord, on a ce premier panneau qui contient l'ensemble des recettes. Donc ça va être un composant que l'on va appeler Rysypes. Donc ce composant, il va avoir besoin de d'appeler le serveur pour récupérer les recettes. Donc il va devoir persister les recettes de cuisine. Donc on aura une propriété à l'intérieur qui sera l'ensemble des recettes. Quand je vais écliquer sur voir la recette, ce composant va charger un autre composant qui est le détail, qui nous affiche les informations concernées à une recette. Donc à ce niveau-là, on va s'imaginer à voir un Rysypes d'Itale, qui permettra d'avoir le détail d'une recette. À l'intérieur de ce composant, on va avoir besoin d'afficher les informations consacrées à la recette. Donc je me dis que ce qu'il serait intéressant d'avoir un entrée, ça serait l'aide d'une recette. Et on aurait un état local, ce qui serait la recette en particulier. Donc ça veut dire qu'on changeraient par exemple un Ajax, l'ensemble des informations concernant la recette et qu'on l'afficheurait. Ensuite, je vais pouvoir cliquer sur Edité. Donc là, on va avoir un formulaire qui permet d'éditer une recette. Pour l'instant, on crée un nouveau composant qu'on va appeler Rysypes Edit Form. Donc ce composant, pour fonctionner, il va avoir besoin de la recette. Donc si on se dit que ce composant est en fin de Rysypes d'Itale, on pourrait lui passer la recette. Ensuite, on va avoir besoin de la liste des ingrédients pour pouvoir afficher ce select, mais aussi gérer les choses. Donc là, on peut se demander à ce qu'on le gère localement ou à ce qu'on le gère au niveau du parent. Donc pour l'instant, on va partir du principe qu'on le gère localement. On récupère les ingrédients par rapport à une recette Ajax. Ensuite, on a besoin de modifier les informations. Donc lorsque je vais cliquer sur un registré, il va falloir faire remonter l'information. Donc si on se dit que ce formulaire est chargé dans ce composant-là, il faut que ce composant-là soit au courant qu'un recette a été modifié. Donc là, on va s'imaginer que l'on va avoir quelque chose qui permettra de faire remonter l'information. Et on apparaça Onsabmit. Et on lui passerait un paramètre, par exemple, la nouvelle recette. Alors, vous commencez à avoir un petit motif qui se dessine, c'est à commencer à être un petit peu compliqué de faire descendre ou remonter de l'information. Donc c'est pour ça que c'est intéressant de poser les choses. On peut voir les problèmes de structures tout de suite. Alors, on va malgré ça continuer. On a la page ingrédient. Donc l'entre-là, ce qu'on est sur cette page-là, il va me falloir afficher le formulaire qui liste les ingrédients. Donc là, on s'imagine qu'on va avoir un composant qui va s'appeler ingrédient. Et ce composant, il devra charger les ingrédients et les récupérer. Donc là, on arrive à un petit souci. C'est qu'on a besoin des ingrédients pour ce composant-là, mais on a aussi besoin des ingrédients pour ce composant-là. Donc on peut se dire, chaque composant va être responsable de récupérer les ingrédients et de faire son traitement, ce qui est finalement assez peu efficace. On peut se dire, si on a déjà chargé les ingrédients, autant le garder en mémoire. Donc là, il va falloir plutôt faire passer de l'information. Donc ce qui serait plus intéressant de faire, c'est que le site lui va avoir la possibilité de charger les ingrédients. Une fois qu'il a les ingrédients, il va les passer à l'ensemble des sous-composants. Et ça va être la même chose pour les autres informations. Donc c'est lui qui va être chargé de la recette et c'est lui qui va être chargé de connaître la recette sur laquelle on est. Donc on va appeler ça courante récipe. Donc c'est le site qui va centraliser les informations, soit directement, soit à vieille, soit avec un contexte de provider et qui fera descendre. Donc maintenant, pour afficher la liste des ingrédients, je vais les recevoir. Par exemple, la partie recette, elle va recevoir les recettes depuis le composant parent. La partie d'itail, elle va recevoir la recette. Et en fait, tout va être reçus ou forme de props. Donc ça, ça deviendra comme ceci. Voilà. Pour la partie ingrédient, on va aussi avoir besoin de faire remonter l'édition. On va mettre un on à date. On lui passera l'ingrédient que l'on souhaite mettre à j'aux et les nouvelles informations. Et on aura aussi un ennolette quand supprimera l'ingrédient. Donc là, pareil, on lui passera l'ingrédient et ça supprimera. Et on aura aussi besoin d'un on create pour pouvoir lui dire, voilà, je viens de créer, où j'ai besoin de créer un ingrédient, voilà les informations. Donc là, on a ce composant-là. Pour la partie ajoutée, ça va être le même principe que le formulaire d'édition. On va avoir un nouveau formulaire que l'on va appeler Rysipe to create form. Lui, il ne recevra pas la recette parce que pour l'instant, il va être complètement vide, mais il recevra la liste des ingrédients. Et quand on soumet les informations, ça créera une nouvelle recette. Donc un peu comme je l'ai fait ici, là, on va s'imaginer que je lui passe un new Rysipe. Et là, je lui passerai, par exemple, la recette et les nouvelles informations. Donc là, la signature serait un petit peu différente entre le Rysipe et dite form et le Rysipe create form. Et là, on a les composants principaux qui vont être utilisés pour notre système. Donc si on refait leur capitulatee, on va commencer par le composant application qui se chargera de gérer l'authentification de l'utilisateur. On aura le login form qui nous permettra de nous aider dans cette tâche-là. Ensuite, on aura la partie site, une fois que l'on est connecté, qui contiendra la page courante, la liste des ingrédients, la liste des recettes, et la recette sur laquelle on est à leur actuel. À partir de ce composant-là, on fera descendre les informations au différents composants qui ont besoin de récupérer les choses. Donc vous allez le voir, pour cette partie-là, on utilisera un réduisseur et je ne pense pas qu'il est nécessaire d'utiliser un contexte. Maintenant que l'on a vu ça, on va pouvoir initialiser notre projet. Donc je vous ai fournit dans les sources de ce chapitre-là, la partie à pays. Vous pouvez télécharger le dossier qui est fournie et vous allez retrouver un dossier à pays. Ce dossier à pays, c'est ce que je vous avais dit, c'est le frein morque à Donis et à l'intérieur, j'ai déjà créé le code qui permet de gérer la pays d'une recette. Pour la partie base de données, j'ai utilisé SQL lite et la base de données vous est fournie. Pour pouvoir démarrer ce serveur-là, il va falloir installer les choses. Donc je vais aller créer une nouvelle fenêtre de Visual Studio Code pour ne pas perdre les choses que j'ai déjà faites. Et je vais aller déplacer tout ce dossier-là. Donc je vais aller hop, lisser tout ça. Une fois que c'est fait, à la racine, je vais mettre un rythmie.md et je vais coller tout l'oscona écrit pour avoir une référence. Je vais aller ouvrir mon terminal, donc je vais dans la partie terminal et j'ouvre un nouveau terminal. Je me rend dans le dossier à pays et je fais un coup de NPM install ou Yarn install. Moi, j'utilise Yarn donc je vais taper Yarn ici. Automatiquement, il va installer les différentes dépendances. Et une fois que c'est fait, on va pouvoir lancer notre serveur. Un utilisant la commande NPM run start ou Yarn start. Automatiquement, il va lancer le serveur sur le port 3333. Donc si vous faites un local host 3333, automatiquement, vous devriez avoir et l'au-word. Si vous faites un revanche slash Rysize, vous allez automatiquement tomber sur ce message d'erreur qui va vous indiquer que vous n'avez pas accès au serveur. Moi, mon gisson est affiché d'une certaine manière, parce que j'utilise ici l'extension qui s'appelle gisson viewer absence. Mais par défaut, si je la désactive, ça devrait ressembler à ça. Donc là, je n'ai pas accès à la partie recette, parce qu'il faut effectivement se connecter et envoyer au niveau de la pays un cookie pour qui nous affiche les recettes. Mais si vous avez ce message-là, c'est que la paye est prête à fonctionner. Ce que l'on va faire, c'est qu'on va laisser ce terminal ouvert et maintenant, on va démarrer notre nouveau projet avec create react app. Donc au niveau de la racine de mon répertoire, je vais aller créer un nouveau projet en faisant un npx create app react tiré app et je vais l'appeler fronte, comme le front qui va permettre de communiquer avec la paye. Une fois que c'est installé, vous faites un CD fronte pour vous rendre un fronte et on fera un yarn start pour démarrer le serveur de Dave de la partie react. Automaticement, il va vous ouvrir votre navigateur sur le port 3000. Donc moi ici, la ouverture navigateur qui n'est pas visible, donc je vais faire un local host de 0.3 000 directement sur ce navigateur-là. Et j'ai maintenant mon application standard. Donc ce que je vous propose dans le prochain chapitre, c'est de voir comment mettre en place le système de connexion qui va permettre aux utilisateurs de se connecter à l'application. Donc je vous donne rendez-vous dans ce prochain chapitre.