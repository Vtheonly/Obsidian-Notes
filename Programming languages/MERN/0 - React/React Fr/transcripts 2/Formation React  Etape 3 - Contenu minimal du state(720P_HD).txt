 Bonjour à tous et bienvenue dans ce nouvel épisode de l'information React dans laquelle nous allons apprendre ensemble à créer des applications web avec le frein moque React. Alors dans ce nouvel épisode nous allons passer à l'État 3 de passer en React qui consistera à déterminer le contenu minimal du stade. Alors on va pouvoir se faire analyser toutes les données que nous avons utilisées jusqu'à la dernière application et pour déterminer quelle donne il va appartenir à un stade on va se poser trois questions fondamentales. Cette formation vous permettra de construire votre propre Netflix dans le cas chaque utilisateur pourra accéder à une liste des films il pourra ajouter des films à sa liste de sué il pourra chercher les films qu'ils souhaitent il pourra voir les détails de chaque film il pourra visionner en ligne ces films et en plus cette application qui nous en rencontrer vous permettra de gagner de l'argent parce que chaque utilisateur devra s'abonner et vous payez via PayPal pour pouvoir lire un film. Alors la première est est-ce que cette donnée est passée d'un composant par an via des propses sinon alors c'est ok ça rend plus la première condition. Deuxi est-ce qu'elle reste échangé au fil du temps sinon c'est encore bon et puis est-ce que nous pouvons calculer cette donnée en fonction de notre state ou d'un proc d'un composant sinon c'est encore ok alors on va rétouner sur le potassium de code je commence par le composant box alors je vois déjà que j'ai la proprie de is-fo open qui est définie dans le composant box alors comme j'ai cette donnée première question est-ce que elle est passée d'un parent non elle est plutôt définie ici donc le premier condition est respecté est-ce qu'elle reste échangé non elle change parce que is-fo open aussi est-ce qu'on calcul is-fo open en fonction de notre state ou d'un autre propriété non plus alors is-fo open fait rappartie d'un state je vais t'en composing action container là je vois que j'ai la donnée is-fo open aussi cette fois-ci elle est passée d'un composant par an via des propses puisque pour utiliser j'utilise des propses alors déjà dès que cette condition n'est par un enit de fils ça ne fera pas partir du state ici je vais d'un composant bouton maintenant ici j'ai une open donnée un composant time of form et elle la donnée title qui vient d'un parent alors ça ne figure pas dans le state à part ça j'ai une open lock donnée mais pour ce compément de long time of form c'est différent on va utiliser un state particulier parce qu'on a besoin d'avoir des champs contrôlés et pour se faire avoir un courir hosté c'est comme elle a vu précédemment alors je fais dans le composant list container ici aussi j'ai une donnée is-fo open premièrement elle ne vient pas d'un composant par an c'est ok elle reste n'est pas échangé et on ne la calcul pas en fonction de notre state ou de notre propriété donc cette donnée is-fo open suferre aussi parti d'un state maintenant je vais d'un composant container is-fo open ici vient d'un parent alors on l'est tombé et puis on a toutes ses propriétés toutes ses données qui particulièrement se constitue chaque propriété d'un timer alors d'office cela aussi fera partie du state et qui sont définissés il ne vienne pas d'un parent et quand vous le savez il a apprécié un project de plan bf bien changé puisqu'on peut modifier un composant parce qu'on clique sur play ou sur pause il a apprécié un changeur et on va avoir ça plus tard et particulièrement je vais avoir une liste de timers que je vais stocer dans un state c'est un orient tableau de timers je vais d'un composant timers lui-même et là j'ai des propses alors il a spring ça ne vient pas d'imparer un si ok est-ce que cela reste un changeur non si encore ok mais si vous le voyez bien on conclut ça en fonction d'autres propriétés ce qui fait qu'il a la troisième condition n'est pas respectée alors il a spring ici mais fera pas partie de la state alors ça sert à tout pour cette vidéo quand vous le voyez c'est un total espoir qu'il faut adopter lorsqu'on se pense en réacte si vous vous aidera à ne pas vous embrouiller lorsque vous avez beaucoup de données et que vous ne savez pas lesquelles d'un fait à partie du state parce que quand vous savez le camp au diffuse de state elle éclanche le rheure endût alors il faudra pas n'en pliquer beaucoup de données qui ont des clanses le rheure endût du composant ne serait pas intéressant pour votre application web alors dans la prochaine vidéo on va voir ensemble maintenant où doit vivre chaque state on quelque chose quel composant doit être std full et lequel doit être std class alors ça sert à tout pour cette vidéo d'ici la portée vous bien liker la vidéo si vous l'avez aimé les cés mois de commentaires si vous en avez partagez l'eau autour de vous et abonnez vous à la chaîne si ce n'est pas encore fait à plus