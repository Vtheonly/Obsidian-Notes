{
  "settings": {
    "mySetting": "default",
    "llmProvider": "gemini",
    "apiKeys": {
      "openai": "AIzaSyDW8PBRBEKn6Z2cX3lt77-Os5-FP-E5n2M",
      "anthropic": "",
      "deepseek": "",
      "gemini": "AIzaSyDW8PBRBEKn6Z2cX3lt77-Os5-FP-E5n2M",
      "mistral": ""
    },
    "models": {
      "openai": "gpt-4",
      "anthropic": "claude-3-opus-20240229",
      "deepseek": "deepseek-chat",
      "gemini": "gemini-1.5-pro",
      "mistral": "mistral-medium"
    }
  },
  "persistedIndex": [
    {
      "filePath": "free or discounted services to nonprofit organizations.md",
      "content": "# Free and Discounted Software for Nonprofits\n\nMany software providers offer free or discounted services to nonprofit organizations, recognizing their vital role in society. These benefits often require proof of nonprofit status. Below are notable offerings:\n\n## Software and Cloud Services for Nonprofits\n\n### 1. Google Workspace for Nonprofits\n\nProvides nonprofit organizations with access to premium collaboration tools, including Gmail, Calendar, Meet, Chat, Drive, Docs, and Sheets, at no cost. This suite enhances communication and productivity within teams.\n\n### 2. Microsoft Nonprofit Solutions\n\nOffers grants and discounts on Microsoft cloud solutions such as Azure, Dynamics 365, and Microsoft 365. These tools assist nonprofits in managing operations, engaging donors, and driving mission impact effectively.\n\n### 3. AWS for Nonprofits\n\nAmazon Web Services provides cloud computing solutions tailored for nonprofits, enabling them to enhance support, expand awareness, and advance their missions both locally and globally.\n\n---\n\n## Free Cloud Computing Resources\n\n### **Google Cloud Platform (GCP) Free Resources**\n\nGoogle Cloud Platform offers several always-free resources that organizations can leverage indefinitely, including:\n\n- Compute resources: A VM with 0.25 vCPU and 1 GB RAM (limited to specific US regions: _us-west1, us-central1, and us-east1_).\n- Storage: 30 GB of standard persistent disk storage.\n- Network: 1 GB of network egress in the premium tier (excluding China and Australia) and 200 GB in the standard tier.\n- BigQuery: 1 TB of querying capability per month and 10 GB of storage.\n- Cloud Storage: 5 GB of regional storage per month in US regions.\n\nThese resources collectively enable organizations to deploy applications, analyze data, and store information without incurring cloud costs, making GCP an attractive option for nonprofits operating on limited budgets.\n\n### **Oracle Cloud's Generous Free Tier**\n\nOracle Cloud stands out by offering some of the most generous always-free resources:\n\n- Compute: Two AMD-based virtual machines (0.25 vCPU, 1 GB RAM each) and four Arm-based VMs with a total of 24 GB RAM, 3,000 OCPU hours, and 18,000 GB memory hours per month.\n- Storage: 200 GB block volumes, 10 GB of standard object storage, and 10 GB of archive storage.\n- Networking: 10 TB of network data egress per month per originating region.\n- Databases: Two autonomous databases (20 GB storage each), NoSQL databases (25 GB per table, up to three tables).\n- Load balancing: One flexible load balancer (10 Mbps) and three network load balancers.\n\nOracle Cloud’s robust offering allows nonprofits to deploy substantial workloads without cost, making it an excellent choice for organizations with limited cloud budgets.\n\n### **Cloudflare Security and Infrastructure Services**\n\nCloudflare provides essential security and infrastructure services for nonprofits at no cost, including:\n\n- DNS services with delegation for reliable domain name resolution.\n- 10 GB of R2 object storage (S3-compatible).\n- D1 serverless SQL database.\n- Content delivery network (CDN) for delegated domains.\n- Free SSL offloading and Web Application Firewall (WAF) for enhanced security.\n- Cloudflare Workers and Pages for deploying serverless functions and static websites.\n\nThese services provide enterprise-grade infrastructure capabilities without financial investment, making them valuable for nonprofits prioritizing security and performance.\n\n### **OVHcloud’s Database and Credit Offerings**\n\nOVHcloud offers:\n\n- A free MongoDB database with 512 MB capacity and built-in replication for reliability.\n- €200 in credits for exploring public cloud resources within 30 days.\n\nWhile OVHcloud’s free tier is more limited compared to others, its inclusion of a replicated MongoDB instance provides a valuable resource for nonprofits requiring document-based NoSQL storage.\n\n---\n\n## Additional Free and Discounted Services for Nonprofits\n\n### 4. Canva for Nonprofits\n\nProvides its premium version free to registered nonprofits, enabling teams to create high-impact social media graphics and marketing materials.\n\n### 5. Box for Nonprofits\n\nA secure cloud storage solution that allows nonprofits to collaborate, manage, and secure all their content and processes in one place.\n\n### 6. TechSoup\n\nActs as a bridge between nonprofits and technology providers, offering donations and discounts on software, hardware, and services from major companies.\n\n### 7. Zeffy\n\nA 100% free fundraising platform that eliminates transaction and platform fees, allowing nonprofits to maximize their fundraising efforts.\n\n### 8. ONLYOFFICE for Nonprofits\n\nOffers a free cloud-based office suite tailored for nonprofits and schools, providing tools for document management, collaboration, and productivity.\n\n### 9. CauseVox\n\nProvides free fundraising software for nonprofits, enabling seamless digital fundraising solutions for online and in-person donations.\n\n### 10. Dropbox Sign\n\nAllows nonprofits to electronically prepare, send, sign, and track documents, streamlining administrative processes and reducing paperwork.\n\n---\n\n### **How to Access These Benefits**\n\nTo qualify for these nonprofit programs, organizations typically need to verify their nonprofit status. This often involves providing:\n\n- A tax-exempt status letter.\n- A nonprofit registration number.\n- Other official documentation as required by the provider.\n\nOnce verified, nonprofits can leverage these powerful tools to enhance operations, outreach, and impact without incurring significant costs.",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Untitled/Untitled.md",
      "content": "# Calculating Entropy and Information Gain: A Note\n\nIn many machine learning applications—especially when building decision trees—**entropy** and **information gain** are essential metrics used to quantify the impurity of a dataset and to determine the best attribute for splitting the data.\n\n---\n\n## Entropy\n\nEntropy measures the uncertainty or disorder in a set of data. In classification tasks, it indicates how mixed the classes are in a dataset.\n\n### The Formula\n\n\\[\nEntropy(S) = -\\sum_{i=1}^{n} p_i \\cdot \\log_2(p_i)\n\\]\n\n- **\\(S\\)**: The dataset.\n- **\\(p_i\\)**: The probability (or proportion) of class \\(i\\) in \\(S\\).\n- The logarithm is base 2 because we measure information in bits.\n\n### Example Calculation of Entropy\n\nConsider a dataset \\(S\\) with 10 samples:\n- 6 positive examples\n- 4 negative examples\n\nFirst, calculate the class probabilities:\n\n\\[\np(\\text{positive}) = \\frac{6}{10} = 0.6 \\quad \\text{and} \\quad p(\\text{negative}) = \\frac{4}{10} = 0.4\n\\]\n\nPlug these into the formula:\n\n\\[\nEntropy(S) = - \\Bigl(0.6 \\cdot \\log_2(0.6) + 0.4 \\cdot \\log_2(0.4)\\Bigr)\n\\]\n\nUsing approximate values:\n- \\(\\log_2(0.6) \\approx -0.737\\)\n- \\(\\log_2(0.4) \\approx -1.322\\)\n\nThe calculation becomes:\n\n\\[\nEntropy(S) \\approx - \\Bigl(0.6 \\times (-0.737) + 0.4 \\times (-1.322)\\Bigr)\n\\]\n\\[\n\\approx - \\Bigl(-0.442 - 0.529\\Bigr) \\approx 0.971 \\text{ bits}\n\\]\n\n---\n\n## Information Gain\n\nInformation Gain quantifies how much the entropy is reduced by splitting the dataset based on a particular attribute. It helps determine the attribute that best separates the classes.\n\n### The Formula\n\n\\[\nGain(S, A) = Entropy(S) - \\sum_{v \\in Values(A)} \\frac{|S_v|}{|S|} \\cdot Entropy(S_v)\n\\]\n\n- **\\(S\\)**: The entire dataset.\n- **\\(A\\)**: The attribute on which the split is made.\n- **\\(S_v\\)**: The subset of \\(S\\) where attribute \\(A\\) takes the value \\(v\\).\n- \\(|S_v|\\) and \\(|S|\\) are the number of samples in \\(S_v\\) and \\(S\\), respectively.\n\n### Example Calculation of Information Gain\n\nAssume the same dataset \\(S\\) (10 samples with 6 positives and 4 negatives) is split by an attribute \\(A\\) into two subsets:\n\n1. **Subset \\(S_1\\)** (7 samples):\n   - 4 positive examples\n   - 3 negative examples\n\n2. **Subset \\(S_2\\)** (3 samples):\n   - 2 positive examples\n   - 1 negative example\n\n#### Step 1: Calculate the Entropy for Each Subset\n\n**For \\(S_1\\):**\n\n- \\(p(\\text{positive}) = \\frac{4}{7} \\approx 0.571\\)\n- \\(p(\\text{negative}) = \\frac{3}{7} \\approx 0.429\\)\n\n\\[\nEntropy(S_1) = -\\left(0.571 \\cdot \\log_2(0.571) + 0.429 \\cdot \\log_2(0.429)\\right)\n\\]\n\nUsing approximate values:\n- \\(\\log_2(0.571) \\approx -0.807\\)\n- \\(\\log_2(0.429) \\approx -1.222\\)\n\n\\[\nEntropy(S_1) \\approx -\\left(0.571 \\times (-0.807) + 0.429 \\times (-1.222)\\right) \\approx 0.985 \\text{ bits}\n\\]\n\n**For \\(S_2\\):**\n\n- \\(p(\\text{positive}) = \\frac{2}{3} \\approx 0.667\\)\n- \\(p(\\text{negative}) = \\frac{1}{3} \\approx 0.333\\)\n\n\\[\nEntropy(S_2) = -\\left(0.667 \\cdot \\log_2(0.667) + 0.333 \\cdot \\log_2(0.333)\\right)\n\\]\n\nUsing approximate values:\n- \\(\\log_2(0.667) \\approx -0.585\\)\n- \\(\\log_2(0.333) \\approx -1.585\\)\n\n\\[\nEntropy(S_2) \\approx -\\left(0.667 \\times (-0.585) + 0.333 \\times (-1.585)\\right) \\approx 0.918 \\text{ bits}\n\\]\n\n#### Step 2: Compute the Weighted Average Entropy After the Split\n\n\\[\n\\text{Weighted Entropy} = \\frac{7}{10} \\cdot Entropy(S_1) + \\frac{3}{10} \\cdot Entropy(S_2)\n\\]\n\\[\n\\approx \\frac{7}{10} \\times 0.985 + \\frac{3}{10} \\times 0.918\n\\]\n\\[\n\\approx 0.6895 + 0.2754 = 0.9649 \\text{ bits}\n\\]\n\n#### Step 3: Calculate the Information Gain\n\nRecall the original entropy of \\(S\\) is approximately 0.971 bits. Now, subtract the weighted entropy:\n\n\\[\nGain(S, A) = Entropy(S) - \\text{Weighted Entropy} \\approx 0.971 - 0.9649 \\approx 0.0061 \\text{ bits}\n\\]\n\nThis very small information gain suggests that the attribute \\(A\\) does not significantly reduce the uncertainty in this particular example.\n\n---\n\n## Conclusion\n\n- **Entropy** quantifies the impurity or disorder within a dataset.\n- **Information Gain** measures the reduction in entropy after splitting the dataset on an attribute.\n- In our example, splitting by attribute \\(A\\) yielded an information gain of approximately **0.0061 bits**, indicating that \\(A\\) is not very effective for separating the classes in this dataset.\n\nThis note outlines the step-by-step process for calculating entropy and information gain, along with a concrete example. Such calculations are fundamental when constructing decision trees, where the goal is to choose the attribute that best reduces uncertainty in the dataset.\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Level 2 - Knowledge Representation/2 - Other examples.md",
      "content": "The user has asked for examples in different contexts similar to a logical statement defining a grandfather relationship. The original statement follows a structure where a relationship between two entities (z and x) is established through an intermediate entity (y), using conditions and logical operators. Specifically, it uses universal quantifiers (∀) and implies a relationship from z to x based on two successive relationships involving y. I will provide five examples in distinct contexts that mirror this structure, ensuring variety and clarity.\n\nHere are five examples in different contexts:\n\n1. Grandmother (Family Context)  \n    ∀x,y,z : femelle(z) ∧ [fille(y,z) ∨ fils(y,z)] ∧ [fille(x,y) ∨ fils(x,y)] ⇒ grand-mère(z,x)\n    \n    - Explanation: If z is female, y is a child (daughter or son) of z, and x is a child of y, then z is the grandmother of x. This is a family relationship similar to grandfather but with a gender change.\n        \n2. Upper Manager (Professional Context)  \n    ∀x,y,z : employee(x) ∧ employee(y) ∧ employee(z) ∧ manages(z,y) ∧ manages(y,x) ⇒ upper-manager(z,x)\n    \n    - Explanation: If z manages y (y reports to z) and y manages x (x reports to y), then z is the upper manager of x. This reflects a hierarchical structure in a workplace, where manages(a,b) means a is the manager of b.\n        \n3. Teacher's Teacher (Educational Context)  \n    ∀x,y,z : student(x) ∧ teacher(y) ∧ teacher(z) ∧ taught-by(x,y) ∧ taught-by(y,z) ⇒ teacher's-teacher(z,x)\n    \n    - Explanation: If x is taught by y (y is x's teacher) and y is taught by z (z is y's teacher), then z is the teacher's teacher of x. This captures a mentorship or educational lineage.\n        \n4. Indirect File Containment (Computer Science Context)  \n    ∀x,y,z : file(x) ∧ folder(y) ∧ folder(z) ∧ contains(z,y) ∧ contains(y,x) ⇒ indirectly-contains(z,x)\n    \n    - Explanation: If folder z contains folder y, and folder y contains file x, then folder z indirectly contains file x. This models a nested structure in a file system, where contains(a,b) means a includes b.\n        \n5. Two-Hop Flight Connection (Transportation Context)  \n    ∀a,b,c : city(a) ∧ city(b) ∧ city(c) ∧ direct-flight(a,b) ∧ direct-flight(b,c) ⇒ two-hop-flight(a,c)\n    \n    - Explanation: If there is a direct flight from city a to city b, and another from city b to city c, then there is a two-hop flight from a to c. This represents a transitive connection in a transportation network.\n        \n\nEach example follows a similar logical pattern: for all entities x, y, and z (or a, b, c), given certain conditions on the entities and two successive relationships (z to y and y to x), a relationship from z to x (or a to c) is implied. The contexts span family, professional hierarchies, education, computer science, and transportation, providing diverse yet structurally consistent illustrations.",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Level 2 - Knowledge Representation/1 - Propositional and Predicate Logic.md",
      "content": "\n## Propositional Logic\n\n#### What It Is\n\nPropositional logic is a basic form of logic that deals with propositions—statements that are either true or false. Each proposition is treated as a standalone fact, with no internal structure or variables.\n\nHow It’s Used in the Document\n\nIn the document, propositional logic is used to list specific family relationships as individual statements. Examples include:\n\n1. \"Claude est fils de Michel\" (Claude is the son of Michel).\n    \n2. \"Chantal est fille de Michel\" (Chantal is the daughter of Michel).\n    \n3. \"Michel est grand-père de Thomas\" (Michel is the grandfather of Thomas).\n    \n\nEach of these is a separate proposition, written in natural language but representing a single, atomic fact.\n\nKey Features\n\n1. Simple Statements: Each proposition is a complete, specific assertion (e.g., \"Claude is the son of Michel\" could be assigned a symbol like P and treated as true or false).\n    \n2. No Variables: It doesn’t use placeholders for people or relationships; every statement is about specific individuals.\n    \n3. No General Rules: It can’t express general relationships, like \"all parents have children.\" Each fact must be explicitly stated.\n    \n\nExample\n\nImagine a family where Michel is Claude’s father, and Claude is Thomas’s father:\n\n- P: \"Michel is the father of Claude\" (true).\n    \n- Q: \"Claude is the father of Thomas\" (true).\n    \n- R: \"Michel is the grandfather of Thomas\" (true).\n    \n\nThese are separate propositions. To connect them (e.g., to say Michel is Thomas’s grandfather because he’s Claude’s father and Claude is Thomas’s father), you’d need additional rules, but propositional logic doesn’t naturally provide a way to link them.\n\n---\n\nPredicate Logic\n\nWhat It Is\n\nPredicate logic builds on propositional logic by adding predicates, variables, and quantifiers. This allows it to express relationships between entities and general rules, making it more powerful and flexible.\n\nHow It’s Used in the Document\n\nThe document defines the \"grandfather\" relationship using a formal predicate logic expression:\n\n- ∀x, y, z : [mâle(z) ∧ [fille(y, z) ∨ fils(y, z)] ∧ [fille(x, y) ∨ fils(x, y)] ⇒ grand-père(z, x)]\n    \n\nLet’s break this down:\n\n- ∀x, y, z: \"For all x, y, z\" (universal quantifier—applies to all individuals).\n    \n- mâle(z): \"z is male\" (a predicate stating z’s gender).\n    \n- [fille(y, z) ∨ fils(y, z)]: \"y is a daughter or son of z\" (y is a child of z).\n    \n- [fille(x, y) ∨ fils(x, y)]: \"x is a daughter or son of y\" (x is a child of y).\n    \n- ⇒ grand-père(z, x): \"then z is the grandfather of x.\"\n    \n\nThis formula means: \"If z is male, and y is a child of z, and x is a child of y, then z is the grandfather of x.\" It’s a general rule that applies to any family.\n\nKey Features\n\n- Predicates: Relationships like \"fils(y, z)\" (y is the son of z) or \"mâle(z)\" (z is male) describe properties or connections between entities.\n    \n- Variables: x, y, and z act as placeholders, allowing the logic to apply to any individuals, not just specific ones like Claude or Michel.\n    \n- Quantifiers: Symbols like ∀ (\"for all\") and ∃ (\"there exists\") enable general statements (e.g., \"all males with grandchildren are grandfathers\").\n    \n- Inference: You can deduce new facts from rules (e.g., if Michel is male, Claude is his son, and Thomas is Claude’s son, then Michel is Thomas’s grandfather).\n    \n\nExample\n\nUsing the same family:\n\n- mâle(Michel): \"Michel is male.\"\n    \n- fils(Claude, Michel): \"Claude is the son of Michel.\"\n    \n- fils(Thomas, Claude): \"Thomas is the son of Claude.\"\n    \n\nApplying the rule:\n\n- Since Michel is male, Claude is his child, and Thomas is Claude’s child, we infer grand-père(Michel, Thomas) (\"Michel is the grandfather of Thomas\").\n    \n\n---\n\nKey Differences Between Propositional Logic and Predicate Logic\n\nHere’s a side-by-side comparison to make the distinction clear:\n\n|Aspect|Propositional Logic|Predicate Logic|\n|---|---|---|\n|Expressiveness|Limited to specific, atomic statements (e.g., \"Claude is the son of Michel\").|Can express general rules and relationships (e.g., \"all males with grandchildren are grandfathers\").|\n|Structure|No internal structure; each proposition is standalone.|Uses predicates, variables, and quantifiers to show connections between entities.|\n|Scalability|Requires a new proposition for each fact, which can get unwieldy (e.g., listing every grandfather relationship).|One rule can cover many cases (e.g., the grandfather rule applies to all families).|\n|Variables|None; specific to named individuals.|Uses variables (x, y, z) to generalize across individuals.|\n|Inference|Limited; connections between facts must be explicitly stated.|Powerful; can deduce new facts from rules (e.g., inferring grandparenthood).|\n|Example from Document|\"Michel est grand-père de Thomas\" as a single fact.|∀x, y, z rule defining \"grand-père\" for any x, y, z.|\n\n---\n\nWhy It Matters\n\n- Propositional Logic is simpler and works well for small, specific sets of facts. However, it becomes impractical for complex systems like family trees with many relationships, as you’d need to list every single fact explicitly.\n    \n- Predicate Logic is more sophisticated and scalable. It can define relationships once (e.g., what makes someone a grandfather) and apply that rule universally, making it ideal for reasoning and knowledge representation in fields like artificial intelligence.\n    \n\n---\n\nPutting It Together with an Example\n\nLet’s revisit the family: Michel is Claude’s father, and Claude is Thomas’s father.\n\n- Propositional Logic:\n    \n    - \"Michel is the father of Claude.\"\n        \n    - \"Claude is the father of Thomas.\"\n        \n    - \"Michel is the grandfather of Thomas.\"\n        \n    - These are three separate statements. If we add another family member (e.g., Chantal as Michel’s daughter and mother of Sophie), we’d need more propositions, like \"Michel is the grandfather of Sophie,\" with no way to connect them automatically.\n        \n- Predicate Logic:\n    \n    - mâle(Michel): \"Michel is male.\"\n        \n    - parent(Michel, Claude): \"Michel is the parent of Claude.\"\n        \n    - parent(Claude, Thomas): \"Claude is the parent of Thomas.\"\n        \n    - Rule: ∀x, y, z : [mâle(x) ∧ parent(x, y) ∧ parent(y, z) ⇒ grand-père(x, z)].\n        \n    - From this, we infer grand-père(Michel, Thomas). If we add parent(Michel, Chantal) and parent(Chantal, Sophie), the same rule infers grand-père(Michel, Sophie)—no extra statements needed.\n        \n\n---\n\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Level 2 - Knowledge Representation/0 - Production rules.md",
      "content": "Okay, let's break down \"Représentation des connaissances - Règles de production\" (Knowledge Representation - Production Rules), as presented in the provided images. This is a crucial topic in Artificial Intelligence, especially in the context of expert systems.\n\n**1. The Core Idea: IF-THEN Rules**\n\n*   **Form:** Production rules, also known as IF-THEN rules, are a fundamental way to represent knowledge in a declarative and modular fashion.  They have the basic structure:\n\n    ```\n    IF <antecedent> THEN <consequent>\n    ```\n    Or, as stated in the slides:\n\n    ```\n     << SI <antécédent> ALORS <conséquent> >>.\n     SI A Alors B\n    ```\n    *   **Antecedent (Premise/Condition):**  This part describes a condition or situation.  It's a set of clauses that are checked against the current state of the system (often called the \"working memory\" or \"fact base\").\n    *   **Consequent (Conclusion/Action):** This part specifies what should happen *if* the antecedent is true. This could be:\n        *   Adding a new fact to the knowledge base.\n        *   Modifying an existing fact.\n        *   Performing an action (e.g., displaying a message, controlling a device).\n        *   Triggering another rule.\n\n*   **Example (Simple):**\n\n    ```\n    IF it is raining THEN take an umbrella\n    ```\n\n    *   `it is raining` is the antecedent.\n    *   `take an umbrella` is the consequent.\n\n* **Modularity:** The beauty of production rules is their modularity.  Each rule is a self-contained chunk of knowledge. You can add, remove, or modify rules without necessarily affecting other rules (although you need to be careful about unintended interactions).  This makes it easier to maintain and update the knowledge base.\n\n**2. Two Types of Logic Used in Rules**\n[[1 - Propositional and Predicate Logic]]\nThe slides highlight two key types of logic that can be used to express the antecedents and consequents of production rules:\n\n*   **Propositional Logic (Logique propositionnelle):**\n\n    *   **Order:** This is \"zeroth-order\" logic (logique d'ordre zéro).  It's the simplest form.\n    *   **Variables:**  It deals with *propositions*, which are simple statements that can be either *true* or *false*.  These are represented by variables (e.g., `A`, `B`, `raining`, `umbrella`).  These variables are *Boolean* – they can only have two values.\n    *   **Operators:** It uses logical operators to combine propositions:\n        *   `¬` (NOT / negation) - Example: `¬raining` (not raining)\n        *   `∧` (AND / conjunction) - Example: `raining ∧ cold` (raining AND cold)\n        *   `∨` (OR / disjunction) - Example: `raining ∨ snowing` (raining OR snowing)\n        *   `⇒` (implies / implication) - Example: `raining ⇒ wet` (raining implies wet)\n        *   `⇔` (if and only if / equivalence) - Example: `hungry ⇔ eat` (hungry if and only if eat)\n    *   **Example (Rule):**\n\n        ```\n        IF (raining ∧ cold) THEN wear_coat\n        ```\n    *   **Limitations:** Propositional logic cannot express relationships *between* objects or make general statements about *all* members of a class. It's limited to specific, individual facts.\n\n*   **Predicate Logic (Logique des prédicats):**\n\n    *   **Order:** This is \"first-order\" logic (logique d'ordre un).  It's more powerful and expressive than propositional logic.\n    *   **Variables:**  It uses variables that can represent *objects* (not just true/false statements).  These variables can be quantified (see below).\n    *   **Constants:** Symbols that represent specific objects (e.g., `michel`, `thomas`).\n    *   **Functions:**  Functions that map objects to other objects (e.g., `father_of(thomas)` might return `michel`).\n    *   **Predicates:**  Predicates represent *relationships* between objects or *properties* of objects.  They return true or false.  Examples:\n        *   `male(michel)` - Michel is male (a property).\n        *   `father(michel, thomas)` - Michel is the father of Thomas (a relationship).\n    *   **Connectives:** It uses the same logical connectives as propositional logic (`¬`, `∧`, `∨`, `⇒`, `⇔`).\n    *   **Quantifiers:** This is what gives predicate logic its power:\n        *   `∀` (Universal Quantifier - \"for all\") - Example: `∀x (cat(x) ⇒ mammal(x))` (For all x, if x is a cat, then x is a mammal).\n        *   `∃` (Existential Quantifier - \"there exists\") - Example: `∃x (cat(x) ∧ black(x))` (There exists an x such that x is a cat and x is black).\n    *   **Example (Rule - from the slide):**\n\n        ```\n        ∀x,y,z : mâle(z) ∧ [fille(y,z)∨fils(y,z)] ∧ [fille(x,y)∨fils(x,y)] ⇒ grand-père(z,x)\n        ```\n        This translates to: \"For all x, y, and z, if z is male, AND y is a daughter or son of z, AND x is a daughter or son of y, THEN z is the grandfather of x.\"\n        This single rule captures the general concept of \"grandfather\" in a way that propositional logic cannot.\n\n[[2 - Other examples]]\n\n**3. Example from the Slide (Family Relationships)**\n\nThe slide shows how to represent family relationships using both propositional and predicate logic.\n\n*   **Propositional Logic (Inefficient):**  You would need a *separate* rule for *every* specific instance of a relationship:\n    *   `claude_is_son_of_michel`\n    *   `chantal_is_daughter_of_michel`\n    *   `michel_is_grandfather_of_thomas`\n    *   ...and so on.  This becomes extremely unwieldy as the number of individuals grows.\n\n*   **Predicate Logic (Efficient):**  You can define *general* rules that apply to *all* individuals who meet the conditions:\n    *   The `grand-père` (grandfather) rule shown above is a perfect example.  It defines the relationship in terms of other predicates (`mâle`, `fille`, `fils`).  You don't need to enumerate every grandfather-grandchild pair.\n\n**4. How Production Rules are Used (Inference)**\n\nProduction rules are the foundation of *rule-based systems* (like expert systems).  A *rule engine* (or *inference engine*) uses these rules to reason and draw conclusions:\n\n1.  **Matching:** The engine compares the antecedents of the rules to the current facts in the \"working memory\" (the known facts).\n2.  **Conflict Resolution:** If *multiple* rules have matching antecedents, the engine uses a *conflict resolution strategy* to decide which rule to \"fire\" (execute).  This strategy might be based on:\n    *   Rule order (first rule that matches).\n    *   Specificity (more specific rules are preferred).\n    *   Recency (rules that match the most recently added facts).\n    *   Priority (rules are assigned priorities).\n3.  **Firing:** When a rule is fired, its consequent is executed. This usually adds new facts to the working memory.\n4.  **Iteration:** This process (matching, conflict resolution, firing) repeats until no more rules can be fired or a goal is reached.\n\nThere are two main ways this iteration can happen:\n\n*   **Forward Chaining (Data-Driven):**  Starts with the known facts and applies rules to derive new facts, working *towards* a goal.  It's like saying, \"Given what I know, what can I conclude?\"\n*   **Backward Chaining (Goal-Driven):** Starts with a *goal* (something you want to prove) and works *backward* to find rules that can support that goal, and then tries to prove the antecedents of *those* rules, and so on.  It's like saying, \"To prove this goal, what do I need to show is true?\"\n\n**In summary:** Production rules are a powerful and flexible way to represent knowledge in an IF-THEN format.  Predicate logic provides the expressiveness needed to represent complex relationships and general rules, making them suitable for building sophisticated AI systems. The use of an inference engine allows the system to use these rules to reason and solve problems.\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Level 1 - Introduction/1 - More ISA AKO Examples.md",
      "content": "ISA Examples (Instance-Class Relationships)\n\nThese examples involve a specific individual (instance) belonging to a class.\n\nFrom Section 1: IS-A Relation (Inheritance)\n\n1. \"Snoopy is a dog.\"\n\n   - Explanation: Snoopy is a specific individual (a character) that belongs to the class of dogs.\n\n2. \"The Eiffel Tower is a monument.\"\n\n   - Explanation: The Eiffel Tower is a specific instance that belongs to the class of monuments.\n\n3. \"My car is a vehicle.\"\n\n   - Explanation: \"My car\" refers to a specific individual car that belongs to the class of vehicles.\n\n4. \"Albert Einstein is a physicist.\"\n\n   - Explanation: Albert Einstein is a specific individual who belongs to the class of physicists.\n\n5. \"Paris is a city.\"\n\n   - Explanation: Paris is a specific instance (a particular city) that belongs to the class of cities.\n\n6. \"The Pacific Ocean is an ocean.\"\n\n   - Explanation: The Pacific Ocean is a specific instance that belongs to the class of oceans.\n\n7. \"A rose is a flower.\"\n\n   - Explanation: Per the annotation (\"A specific rose - individual, flower - class\"), this refers to a specific rose (an individual) belonging to the class of flowers. Note: Without the annotation, this could be AKO if \"rose\" meant the class of roses, but the intent here is ISA.\n\n8. \"My smartphone is a mobile device.\"\n\n   - Explanation: \"My smartphone\" is a specific instance that belongs to the class of mobile devices.\n\n9. \"Mount Everest is a mountain.\"\n\n   - Explanation: Mount Everest is a specific instance that belongs to the class of mountains.\n\n10. \"The Mona Lisa is a painting.\"\n\n   - Explanation: The Mona Lisa is a specific instance (a particular artwork) that belongs to the class of paintings.\n\n11. \"Italian is a language.\"\n\n   - Explanation: Italian is a specific instance (a particular language) that belongs to the class of languages.\n\n12. \"Apple pie is a dessert.\"\n\n   - Explanation: Apple pie is a specific instance (a particular dish) that belongs to the class of desserts.\n\n13. \"Dr. Smith is a doctor.\"\n\n   - Explanation: Dr. Smith is a specific individual who belongs to the class of doctors.\n\n14. \"Tuesday is a day of the week.\"\n\n   - Explanation: Tuesday is a specific instance (a particular day) that belongs to the class of days of the week.\n\n15. \"This webpage is a document.\"\n\n   - Explanation: \"This webpage\" refers to a specific instance that belongs to the class of documents.\n\n16. \"A blue whale is a mammal.\"\n\n   - Explanation: Per the annotation (\"A blue whale - individual, mammal - class\"), this refers to a specific blue whale (an individual) belonging to the class of mammals. Note: Without the annotation, this could be AKO if \"blue whale\" meant the species, but the intent here is ISA.\n\n17. \"My laptop is a computer.\"\n\n   - Explanation: \"My laptop\" is a specific instance that belongs to the class of computers.\n\n18. \"The Nile is a river.\"\n\n   - Explanation: The Nile is a specific instance (a particular river) that belongs to the class of rivers.\n\n19. \"A novel is a book.\"\n\n   - Explanation: Per the annotation (\"A specific novel - individual, book - class\"), this refers to a specific novel (an individual) belonging to the class of books. Note: Without the annotation, this could be AKO if \"novel\" meant the class of novels, but the intent here is ISA.\n\n20. \"A zebra is an animal.\"\n\n   - Explanation: Per the annotation (\"A zebra - individual, animal - class\"), this refers to a specific zebra (an individual) belonging to the class of animals. Note: Without the annotation, this could be AKO if \"zebra\" meant the species, but the intent here is ISA.\n\n---\n\nAKO Examples (Subclass-Superclass Relationships)\n\nThese examples involve a class being a subclass of a broader class, often indicated by the phrase \"is a kind of.\"\n\n\n1. \"A dog is a kind of mammal.\"\n\n   - Explanation: The class of dogs is a subclass of the broader class of mammals.\n\n2. \"A monument is a kind of structure.\"\n\n   - Explanation: The class of monuments is a subclass of the broader class of structures.\n\n3. \"A car is a kind of vehicle.\"\n\n   - Explanation: The class of cars is a subclass of the broader class of vehicles.\n\n4. \"A physicist is a kind of scientist.\"\n\n   - Explanation: The class of physicists is a subclass of the broader class of scientists.\n\n5. \"A city is a kind of urban area.\"\n\n   - Explanation: The class of cities is a subclass of the broader class of urban areas.\n\n6. \"An ocean is a kind of body of water.\"\n\n   - Explanation: The class of oceans is a subclass of the broader class of bodies of water.\n\n7. \"A flower is a kind of plant.\"\n\n   - Explanation: The class of flowers is a subclass of the broader class of plants.\n\n8. \"A smartphone is a kind of electronic device.\"\n\n   - Explanation: The class of smartphones is a subclass of the broader class of electronic devices.\n\n9. \"A mountain is a kind of landform.\"\n\n   - Explanation: The class of mountains is a subclass of the broader class of landforms.\n\n10. \"A painting is a kind of artwork.\"\n\n    - Explanation: The class of paintings is a subclass of the broader class of artworks.\n\n11. \"Language is a kind of communication system.\"\n\n    - Explanation: The class of languages is a subclass of the broader class of communication systems.\n\n12. \"Dessert is a kind of food.\"\n\n    - Explanation: The class of desserts is a subclass of the broader class of foods.\n\n13. \"Doctor is a kind of profession.\"\n\n    - Explanation: The class of doctors is a subclass of the broader class of professions.\n\n14. \"Day of the week is a kind of time unit.\"\n\n    - Explanation: The class of days of the week is a subclass of the broader class of time units.\n\n15. \"Document is a kind of information carrier.\"\n\n    - Explanation: The class of documents is a subclass of the broader class of information carriers.\n\n16. \"Mammal is a kind of animal.\"\n\n    - Explanation: The class of mammals is a subclass of the broader class of animals.\n\n17. \"Computer is a kind of electronic device.\"\n\n    - Explanation: The class of computers is a subclass of the broader class of electronic devices.\n\n18. \"River is a kind of body of water.\"\n\n    - Explanation: The class of rivers is a subclass of the broader class of bodies of water.\n\n19. \"Book is a kind of publication.\"\n\n    - Explanation: The class of books is a subclass of the broader class of publications.\n\n20. \"Animal is a kind of living organism.\"\n\n    - Explanation: The class of animals is a subclass of the broader class of living organisms.\n\n21. \"A dog is a kind of animal.\"\n\n    - Explanation: The class of dogs is a subclass of the broader class of animals.\n\n22. \"A cat is a kind of mammal.\"\n\n    - Explanation: The class of cats is a subclass of the broader class of mammals.\n\n23. \"A rose is a kind of flower.\"\n\n    - Explanation: The class of roses is a subclass of the broader class of flowers. Note: This differs from example 7 in Section 1, where \"a rose\" was an individual due to the annotation.\n\n24. \"A sedan is a kind of car.\"\n\n    - Explanation: The class of sedans is a subclass of the broader class of cars.\n\n25. \"A pizza is a kind of food.\"\n\n    - Explanation: The class of pizzas is a subclass of the broader class of foods.\n\n26. \"A novel is a kind of book.\"\n\n    - Explanation: The class of novels is a subclass of the broader class of books. Note: This differs from example 19 in Section 1, where \"a novel\" was an individual due to the annotation.\n\n27. \"A square is a kind of rectangle.\"\n\n    - Explanation: The class of squares is a subclass of the broader class of rectangles.\n\n28. \"A poem is a kind of literature.\"\n\n    - Explanation: The class of poems is a subclass of the broader class of literature.\n\n29. \"A smartphone is a kind of electronic device.\"\n\n    - Explanation: The class of smartphones is a subclass of the broader class of electronic devices.\n\n30. \"A river is a kind of body of water.\"\n\n    - Explanation: The class of rivers is a subclass of the broader class of bodies of water.\n\n31. \"A maple is a kind of tree.\"\n\n    - Explanation: The class of maples is a subclass of the broader class of trees.\n\n32. \"A comedy is a kind of movie.\"\n\n    - Explanation: The class of comedies is a subclass of the broader class of movies.\n\n33. \"A jazz is a kind of music.\"\n\n    - Explanation: The class of jazz (as a genre) is a subclass of the broader class of music. Note: \"A jazz\" is slightly awkward phrasing; typically, it would be \"Jazz is a kind of music.\"\n\n34. \"A doctor is a kind of professional.\"\n\n    - Explanation: The class of doctors is a subclass of the broader class of professionals.\n\n35. \"A Tuesday is a kind of weekday.\"\n\n    - Explanation: This is problematic because \"Tuesday\" is typically an individual day, not a class, making \"Tuesday is a weekday\" an ISA relationship. However, the phrasing \"a kind of\" and annotation (\"Tuesday - class, weekday - broader class\") suggest an intent for AKO, implying the class of all Tuesdays (e.g., every Tuesday) as a subclass of weekdays. This is non-standard but followed here per the query’s intent.\n\n36. \"A webpage is a kind of document.\"\n\n    - Explanation: The class of webpages is a subclass of the broader class of documents.\n\n37. \"A blue whale is a kind of mammal.\"\n\n    - Explanation: The class of blue whales (as a species) is a subclass of the broader class of mammals. Note: This differs from example 16 in Section 1, where \"a blue whale\" was an individual due to the annotation.\n\n38. \"A laptop is a kind of computer.\"\n\n    - Explanation: The class of laptops is a subclass of the broader class of computers.\n\n39. \"A novel is a kind of book.\"\n\n    - Explanation: The class of novels is a subclass of the broader class of books (same as example 26 in this section).\n\n40. \"A zebra is a kind of animal.\"\n\n    - Explanation: The class of zebras is a subclass of the broader class of animals. Note: This differs from example 20 in Section 1, where \"a zebra\" was an individual due to the annotation.\n\n---\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Level 1 - Introduction/0 - ISA and AKO.md",
      "content": "# Knowledge Representation: ISA and AKO Relationships\n\n## Introduction\n\nIn the realm of Artificial Intelligence, particularly within semantic networks, effectively representing knowledge is paramount. Two fundamental relationships used to structure hierarchical knowledge are **ISA** and **AKO**. These relationships, while both dealing with hierarchies, represent distinct types of connections between concepts. This note will delve into the nuances of ISA and AKO, providing clear definitions, examples, and analyses of potentially ambiguous cases.\n\n1. Introduction to ISA and AKO Relations\n\n2. ISA (Instance-Of) Relation\n   - Represents relationships between specific instances and their classes\n   - Example: \"Snoopy is a dog\" (Snoopy is an instance of the dog class)\n\n3. AKO (A-Kind-Of) Relation\n   - Represents relationships between classes (subclass-superclass)\n   - Example: \"Dog is a kind of mammal\" (Dog class is a subclass of mammal class)\n\n4. Key Differences\n   - ISA: Individual → Class relationship\n   - AKO: Class → Class relationship\n\n**Understanding ISA and AKO** : Both ISA and AKO are used to represent hierarchical relationships between concepts in semantic networks, but they represent different types of hierarchies:\n\n*   **ISA (Instance-Of or Is-A):**  This relationship expresses **instance membership**. It connects a *specific individual* (an instance) to its *class or category*.  Think of it as saying \"**This *thing* is a *type of*...**\" or \"**This *thing* belongs to the category of...**\" or simply \"**This *thing* is a ...**\".\n\n*   **AKO (A-Kind-Of or Is-A-Kind-Of):** This relationship expresses **class inclusion** or **subclassing**. It connects a *class or category* to a *broader, more general class or category*. Think of it as saying \"**This *category* is a *kind of*...**\" or \"**This *category* is a *subtype of*...**\" or \"**This *category* is included within the category of...**\"\n\n**Key Difference:** The core difference is that **ISA links an *individual* to a *class*,** while **AKO links a *class* to a *broader class*.**\n\n\n## ISA (Instance-Of)\n\n**Definition:** The ISA relationship signifies **instance membership**. It establishes a link between a *specific individual* (an instance) and its *class or category*. In essence, it asserts that a particular entity *belongs to* or *is a member of* a specific category.\n\n**Keywords:** \"is a\", \"is an\", \"is a type of\", \"belongs to the category of\"\n\n**Example Phrases:**\n\n*   \"\\[Individual] is a \\[Class]\"\n*   \"\\[Individual] is an \\[Class]\"\n*   \"\\[Individual] belongs to the category of \\[Class]\"\n\n**15 Illustrative Examples:**\n\n1. \"Snoopy **is a** dog.\" (Snoopy - *individual*, dog - *class*)\n2. \"The Eiffel Tower **is a** monument.\" (Eiffel Tower - *individual*, monument - *class*)\n3. \"My car **is a** vehicle.\" (My car - *individual*, vehicle - *class*)\n4. \"Albert Einstein **is a** physicist.\" (Albert Einstein - *individual*, physicist - *class/profession*)\n5. \"Paris **is a** city.\" (Paris - *individual*, city - *class*)\n6. \"The Pacific Ocean **is an** ocean.\" (Pacific Ocean - *individual*, ocean - *class*)\n7. \"A rose **is a** flower.\" (*A specific* rose - *individual*, flower - *class*)\n8. \"My smartphone **is a** mobile device.\" (My smartphone - *individual*, mobile device - *class*)\n9. \"Mount Everest **is a** mountain.\" (Mount Everest - *individual*, mountain - *class*)\n10. \"The Mona Lisa **is a** painting.\" (Mona Lisa - *individual*, painting - *class*)\n11. \"Italian **is a** language.\" (Italian - *individual language*, language - *class*)\n12. \"Apple pie **is a** dessert.\" (Apple pie - *individual dish*, dessert - *class*)\n13. \"Dr. Smith **is a** doctor.\" (Dr. Smith - *individual*, doctor - *class/profession*)\n14. \"Tuesday **is a** day of the week.\" (Tuesday - *individual day*, day of the week - *class*)\n15. \"This webpage **is a** document.\" (This webpage - *individual*, document - *class*)\n\n## AKO (A-Kind-Of)\n\n**Definition:** The AKO relationship denotes **class inclusion** or **subclassing**. It connects a *class or category* to a *broader, more general class or category*. Essentially, it indicates that one category is a *subtype* or a *kind of* another category.\n\n**Keywords:** \"is a kind of\", \"is a type of\", \"is a subclass of\", \"is included within the category of\"\n\n**Example Phrases:**\n\n*   \"\\[Class] is a kind of \\[Broader Class]\"\n*   \"\\[Class] is a type of \\[Broader Class]\"\n*   \"\\[Class] is a subclass of \\[Broader Class]\"\n\n**15 Illustrative Examples:**\n\n1. \"A dog **is a kind of** mammal.\" (dog - *class*, mammal - *broader class*)\n2. \"A monument **is a kind of** structure.\" (monument - *class*, structure - *broader class*)\n3. \"A car **is a kind of** vehicle.\" (car - *class*, vehicle - *broader class*)\n4. \"A physicist **is a kind of** scientist.\" (physicist - *class*, scientist - *broader class*)\n5. \"A city **is a kind of** urban area.\" (city - *class*, urban area - *broader class*)\n6. \"An ocean **is a kind of** body of water.\" (ocean - *class*, body of water - *broader class*)\n7. \"A flower **is a kind of** plant.\" (flower - *class*, plant - *broader class*)\n8. \"A smartphone **is a kind of** electronic device.\" (smartphone - *class*, electronic device - *broader class*)\n9. \"A mountain **is a kind of** landform.\" (mountain - *class*, landform - *broader class*)\n10. \"A painting **is a kind of** artwork.\" (painting - *class*, artwork - *broader class*)\n11. \"Language **is a kind of** communication system.\" (language - *class*, communication system - *broader class*)\n12. \"Dessert **is a kind of** food.\" (dessert - *class*, food - *broader class*)\n13. \"Doctor **is a kind of** profession.\" (doctor - *class*, profession - *broader class*)\n14. \"Day of the week **is a kind of** time unit.\" (day of the week - *class*, time unit - *broader class*)\n15. \"Document **is a kind of** information carrier.\" (document - *class*, information carrier - *broader class*)\n[[1 - More ISA AKO Examples]]\n## Disambiguating Challenging Cases\n\nCertain examples can appear ambiguous, potentially blurring the lines between ISA and AKO. Let's analyze some of these instances to solidify our understanding.\n\n### Difficult ISA Examples (Why NOT AKO)\n\nThese examples highlight cases where the phrasing might suggest AKO, but they are ISA due to the presence of a *specific instance*.\n\n1. **\"My poodle is a dog.\"**\n    *   **Why ISA:** \"My poodle\" refers to a *specific, individual dog*. \"Dog\" is the *class* to which it belongs.\n    *   **Why NOT AKO:** AKO would be appropriate for a class-level relationship, like \"A poodle is a kind of dog.\" Here, the focus is on a *particular poodle*, not the poodle breed as a whole.\n\n2. **\"This Toyota is a car.\"**\n    *   **Why ISA:** \"This Toyota\" designates a *specific car* (an instance). \"Car\" is the *class* it falls under.\n    *   **Why NOT AKO:**  \"Toyota is a kind of car\" correctly uses AKO. However, in this case, we're referring to a *particular vehicle*, not the Toyota brand as a category.\n\n3. **\"Einstein was a scientist.\"**\n    *   **Why ISA:** \"Einstein\" denotes a *specific individual*. \"Scientist\" represents his *profession*, which is a class.\n    *   **Why NOT AKO:** While \"Scientist is a kind of person\" is a valid AKO relationship, our example concerns *Einstein's specific profession*, not scientists as a subclass.\n\n4. **\"The red rose in my garden is a flower.\"**\n    *   **Why ISA:** \"The red rose in my garden\" identifies a *specific, individual flower*. \"Flower\" is the *class* it belongs to.\n    *   **Why NOT AKO:** \"A red rose is a kind of rose\" is a correct AKO statement. However, the example focuses on a *particular plant* in a specific location.\n\n5. **\"Canada is a country.\"**\n    *   **Why ISA:** \"Canada\" is the name of a *specific nation* (an instance). \"Country\" is the *class* of political entities to which it belongs.\n    *   **Why NOT AKO:**  \"Country is a kind of political entity\" correctly uses AKO. But, our example emphasizes *Canada's specific status* as a country.\n\n### Difficult AKO Examples (Why NOT ISA)\n\nThese examples showcase scenarios where the phrasing might seem like a factual statement about an individual, but they actually describe relationships between classes.\n\n1. **\"Dog is a mammal.\"**\n    *   **Why AKO:** \"Dog\" represents a *class of animals*. \"Mammal\" is a *broader class* encompassing dogs. This describes a relationship between the *category* of dogs and the *category* of mammals.\n    *   **Why NOT ISA:** ISA requires a *specific dog*. Here, \"dog\" refers to the *entire class* of dogs.\n\n2. **\"Car is a vehicle.\"**\n    *   **Why AKO:** \"Car\" represents a *class of transportation*. \"Vehicle\" is a *broader class*. This describes the inclusion of the *category* of cars within the *category* of vehicles.\n    *   **Why NOT ISA:** ISA needs a *specific car*. Here, \"car\" denotes the *class*.\n\n3. **\"Scientist is a person.\"**\n    *   **Why AKO:** \"Scientist\" is a *class of people* based on their profession. \"Person\" is a *broader class*. This highlights the *category* of scientists as a subset of the *category* of people.\n    *   **Why NOT ISA:** ISA necessitates a *specific scientist*. Here, \"scientist\" refers to the *class*.\n\n4. **\"Flower is a plant.\"**\n    *   **Why AKO:** \"Flower\" represents a *class of plant structures*. \"Plant\" is a *broader biological class*. The statement describes the inclusion of the *category* of flowers within the *category* of plants.\n    *   **Why NOT ISA:** ISA needs a *specific flower*. Here, \"flower\" refers to the *class*.\n\n5. **\"Country is a political entity.\"**\n    *   **Why AKO:** \"Country\" represents a *class of political organization*. \"Political entity\" is a *broader, more abstract class*. This highlights the *category* of countries as a type of *category* of political entities.\n    *   **Why NOT ISA:** ISA requires a *specific country*. Here, \"country\" denotes the *class*.\n\n## Conclusion\n\nDistinguishing between ISA and AKO relationships hinges on recognizing whether the relationship connects an *individual* to a *class* (ISA) or a *class* to a *broader class* (AKO). By carefully analyzing the phrasing and identifying the presence of specific instances versus general categories, one can confidently determine the appropriate relationship. These distinctions are crucial for building accurate and meaningful semantic networks, which are foundational for many AI applications.",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Level 0 - Learn R/TP 3.md",
      "content": "Okay, here's the breakdown of TP N° 3 (RStudio, Factors, and Lists), again formatted for easy copy-pasting without Markdown rendering, and with R code inside triple backticks.\n\n### A. Présentation de RStudio (Introduction to RStudio)\n\nRStudio is a popular Integrated Development Environment (IDE) for R.  It provides a user-friendly interface for writing, running, and debugging R code.  You can download it from: https://www.rstudio.com/products/rstudio/download/\n\nAfter installation and launching, RStudio typically displays a window divided into four panes:\n\n1.  **Source Editor (Top Left):** This is where you write and edit your R scripts.\n    *   **Syntax Highlighting:**  RStudio color-codes your code, making it easier to read.\n    *   **Code Completion:**  Pressing the `Tab` key will suggest completions for function and variable names.\n    *   **Execution:**  `Ctrl+Enter` (or `Cmd+Enter` on macOS) executes the current line or selected code from the editor in the console.\n\n2.  **Console (Bottom Left):** This is the interactive R interpreter, where commands are executed and output is displayed.\n\n    *   **Exercise:** In the source editor, type the following code: `x <- 1:20; x <- x + 1`. Select it and press `Ctrl+Enter` several times.\n        *   **Observation:**  Each time you execute the code, the value of `x` in the console (and in the Environment pane) increases by 1 for each element.  This demonstrates how R updates variables.  The semicolon allows multiple statements on one line.\n\n3.  **Environment/History (Top Right):**\n    *   **Environment:** Shows the variables (objects) currently defined in your R session, along with their values and types.\n    *   **History:** Displays a list of previously executed commands.\n\n    *   **Exercise:** Execute the following: `mat <- matrix(1:100, nrow=20, byrow=TRUE)`.  Then, look at the Environment pane.  You'll see the `mat` variable, and you can click on it to view its contents in a spreadsheet-like viewer.\n\n4.  **Files/Plots/Packages/Help/Viewer (Bottom Right):**\n    *   **Files:**  A file browser to navigate your computer's file system.\n    *   **Plots:**  Displays any plots or graphs you create.\n    *   **Packages:**  Allows you to manage R packages (install, load, update).\n    *   **Help:**  Provides access to R's documentation.\n    *   **Viewer:** Used to view the output.\n    *   **Exercises:**\n        *   Execute `x <- 0:20; plot(cos(x))`.  The plot will appear in the Plots pane. The default display method is with scattered points.\n        *   Execute `?plot`. This opens the help page for the `plot` function in the Help pane. Check for the `type` argument to create a connected curve by setting it to \"l\".\n        *   Use the \"Export\" menu in the Plots pane to save the graph as a PDF.\n        *   Use the \"Files\" pane to navigate to the saved PDF and open it.\n\n### B. Facteurs (Factors)\n\nFactors are a special data type in R used to represent categorical data. They are crucial for statistical modeling and data analysis.\n\n*   **Key Features:**\n    *   Store categorical values.\n    *   Have a `levels` attribute: a vector of the unique, ordered categories.\n\n*   **Creating Factors:**\n\n    ```R\n    mentions <- factor(c(\"Tres Bien\", \"Bien\", \"Assez Bien\", \"Passable\", \"Faible\"))\n    print(mentions)\n    # [1] Tres Bien Bien      Assez Bien Passable  Faible\n    # Levels: Assez Bien Bien Faible Passable Tres Bien\n    ```\n    *   Notice that the `levels` are automatically ordered alphabetically.\n\n    *   **Specifying Levels Explicitly:**\n\n        ```R\n        mentions <- factor(c(\"Tres Bien\", \"Bien\", \"Assez Bien\", \"Passable\", \"Faible\"),\n                          levels = c(\"Excellent\", \"Tres Bien\", \"Bien\", \"Assez Bien\", \"Passable\", \"Faible\", \"tres faible\"))\n        print(mentions)\n        # [1] Tres Bien Bien      Assez Bien Passable  Faible\n        # Levels: Excellent Tres Bien Bien Assez Bien Passable Faible tres faible\n        ```\n        *   This allows you to control the order of the levels and include levels that might not be present in the initial data.\n\n*   **Adding Names to Factor Elements:**\n    ```r\n    names(mentions) = c(\"DM1\", \"DS1\", \"DS2\", \"DM2\", \"DS3\")\n    print(mentions)\n    ```\n\n*   **Difference between implicit and explicit level creation:** There's no fundamental difference in the `levels` attribute itself.  The difference lies in *how* the levels are determined.  Implicit creation uses alphabetical order of the *unique* values. Explicit creation lets you define the order and include levels not present in the data.\n\n*   **`length()` and Factor Size:**\n\n    ```R\n    length(mentions)  # Get the length (number of elements)\n    print(mentions)\n\n    length(mentions) <- 3  # Truncate the factor\n    print(mentions)\n\n    length(mentions) <- 10 # Extend the factor (adds NA values)\n    print(mentions)\n    ```\n    *   Changing the length of a factor can truncate it (remove elements) or extend it (add `NA` values for missing elements).\n\n*   **Accessing Factor Elements:**\n\n    ```R\n    mentions[3]             # Access by numeric index\n    mentions[c(\"DS2\", \"DS4\")] # Access by name (if names are assigned). This example will cause an error since \"DS4\" doesn't exist in the names.\n    mentions[1:4]           # Access a range of elements\n    ```\n\n*   **`levels()` Function:**\n\n    ```R\n    levels(mentions)  # Get the levels\n    levels(mentions) <- c(levels(mentions), \"Mediocre\")  # Add a new level\n    print(levels(mentions))\n    ```\n\n### C. Listes (Lists)\n\nLists are versatile data structures that can hold elements of *different* data types (unlike vectors, which must be homogeneous).\n\n*   **Creating Lists:** Use the `list()` function.\n\n    ```R\n    # Named list elements\n    maliste <- list(\"a\" = 2.75, \"b\" = TRUE, \"c\" = 1:5)\n    print(maliste)\n    str(maliste)  # Show the structure of the list\n\n    # Unnamed list elements\n    maliste <- list(2.75, TRUE, 1:5)\n    print(maliste)\n    str(maliste)\n    ```\n\n*   **Accessing List Elements:**\n\n    *   `maliste$a`: Access by name (if named).\n    *   `maliste[[1]]`: Access by numeric index (double brackets).\n    * `maliste[[3]][3]` : access to the element at index 3 of the list at index 3 of the main list.\n\n*   **Adding Names to Matrix Dimensions (using lists):**\n   ```r\n   A <- matrix(c(1,2,3,4,5,6), nrow=2)\n   dimnames(A) <- list(c(\"row1\", \"row2\"), c(\"col1\", \"col2\", \"col3\"))\n   print(A)\n   A[\"row2\", \"col3\"] # element at 2nd row, 3rd column\n   A[\"row1\",]\n   ```\n\nThis provides a complete, copy-paste-friendly version of the third R tutorial. I've clarified some points, added more explanations, and ensured all the code is in a runnable format. This should be much easier to use for your studies.\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Level 0 - Learn R/TP 3.1.md",
      "content": "Okay, let's delve deeper into factors and levels in R, and then separately explain `sapply` and `mapply`.\n\n**Factors and Levels: A Deeper Dive**\n\nThink of factors as R's way of handling *categorical* data.  Categorical data is data that takes on a limited number of discrete values, representing categories or groups.  These are distinct from *numerical* data (like height or weight) which can take on a continuous range of values.\n\n**Why are factors important?**\n\n1.  **Statistical Modeling:** Many statistical methods in R (like ANOVA, regression with categorical predictors, etc.) require categorical variables to be represented as factors.  R treats factors differently from character vectors in these models.\n2.  **Memory Efficiency:**  For large datasets with repeating categorical values, factors can be more memory-efficient than storing the same data as character vectors.  The levels are stored only once.\n3.  **Data Integrity:** Factors can help enforce data integrity.  You can define the allowed levels, preventing accidental entry of invalid categories.\n4.  **Ordering:**  Factors allow you to specify an *order* for the categories, which is crucial for some analyses (e.g., ordinal regression).\n\n**Levels: The Heart of a Factor**\n\nThe `levels` attribute is what makes a factor a factor.  It's a character vector that stores the *unique* possible values (categories) that the factor can take.\n\n*   **Implicit Level Creation:** When you create a factor from a character vector without specifying the `levels`, R does the following:\n    1.  Finds all the *unique* values in the character vector.\n    2.  Sorts these unique values *alphabetically*.\n    3.  Uses this sorted vector of unique values as the `levels`.\n\n    ```R\n    my_colors <- factor(c(\"red\", \"blue\", \"red\", \"green\", \"blue\"))\n    levels(my_colors)  # Output: [1] \"blue\"  \"green\" \"red\"\n    ```\n\n*   **Explicit Level Creation:** This is where you gain control.  You provide the `levels` argument when creating the factor:\n\n    ```R\n    my_colors <- factor(c(\"red\", \"blue\", \"red\", \"green\", \"blue\"),\n                        levels = c(\"red\", \"green\", \"blue\", \"yellow\"))\n    levels(my_colors)  # Output: [1] \"red\"   \"green\" \"blue\"  \"yellow\"\n    ```\n\n    **Key Advantages of Explicit Levels:**\n\n    1.  **Order Control:** You specify the order, which is *not* necessarily alphabetical.  This is essential for ordinal categories (e.g., \"low\", \"medium\", \"high\").\n    2.  **Including Unseen Levels:** You can include levels that aren't present in the current data.  This is useful if you know the possible categories, even if some aren't observed in your sample.  For example, you might have a survey question with \"Strongly Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\" as options, but your current data might not have any \"Strongly Disagree\" responses.  You'd still want to include it in the levels.\n    3. **Prevent errors** Imagine that you create two vectors. The first one will create factor implicitly. The second will create levels explicitly with a typing error.\n\n    ```R\n      # Implicit\n    my_colors <- factor(c(\"red\", \"blue\", \"red\", \"gren\", \"blue\")) #gren instead of green\n    levels(my_colors) # Output: [1] \"blue\" \"gren\" \"red\" , gren is considered a valid level.\n    # Explicit\n    my_colors <- factor(c(\"red\", \"blue\", \"red\", \"gren\", \"blue\"), levels = c(\"red\",\"green\",\"blue\") ) #gren instead of green\n    levels(my_colors) # Output: [1] \"red\" \"green\" \"blue\" , the level gren is ignored.\n    ```\n\n**Modifying Levels**\n\nYou can modify the levels of an existing factor using the `levels()` function on the left-hand side of an assignment:\n\n```R\n# Continuing the previous example...\nlevels(my_colors) <- c(\"red\", \"green\", \"blue\")  # Remove \"yellow\"\nlevels(my_colors) <- c(\"red\", \"green\", \"blue\", \"purple\") # Add \"purple\"\nlevels(my_colors)[levels(my_colors) == \"red\"] <- \"crimson\"  # Rename \"red\" to \"crimson\"\n```\n\n**`names()` and Factors**\n\nThe `names()` function, when applied to a factor, lets you assign names to the *individual elements* of the factor, *not* to the levels.  This is a separate concept from the `levels`.\n\n```R\nmy_colors <- factor(c(\"red\", \"blue\", \"red\", \"green\"))\nnames(my_colors) <- c(\"A\", \"B\", \"C\", \"D\")\nprint(my_colors)\n#      A      B      C      D\n#    red   blue    red  green\n# Levels: blue green red\n\nmy_colors[\"B\"]  # Access the element named \"B\" (which has the value \"blue\")\n```\n\n**In Summary: Factors are Essential**\n\nFactors, with their `levels` attribute, provide a structured way to represent and work with categorical data in R.  Understanding the difference between implicit and explicit level creation, and how to modify levels, is fundamental for effective data analysis in R.\n\n---\n\n**`sapply` and `mapply`**\n\n`sapply` and `mapply` are part of R's \"apply\" family of functions, which are designed to apply a function to elements of a data structure (like a list or vector) without explicitly writing loops. They are powerful tools for vectorized operations.\n\n**`sapply` (Simplify Apply)**\n\n*   **Purpose:** Applies a function to each element of a vector or list and tries to *simplify* the result to a vector or matrix if possible.\n*   **Syntax:** `sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)`\n    *   `X`: The vector or list to which you want to apply the function.\n    *   `FUN`: The function to apply.\n    *   `...`:  Optional arguments to be passed to `FUN`.\n    *   `simplify`:  Logical; if `TRUE` (the default), R tries to simplify the result to a vector or matrix.  If `FALSE`, the result is always a list.\n    *   `USE.NAMES`: Logical; if `TRUE` (the default) and `X` has names, the names are preserved in the result.\n\n*   **Examples:**\n\n    ```R\n    # Example 1: Square each element of a vector\n    numbers <- c(1, 2, 3, 4, 5)\n    squared_numbers <- sapply(numbers, function(x) x^2)\n    print(squared_numbers)  # Output: [1]  1  4  9 16 25 (a vector)\n\n    # Example 2: Get the length of each string in a list\n    my_list <- list(\"apple\", \"banana\", \"orange\")\n    string_lengths <- sapply(my_list, nchar)\n    print(string_lengths)  # Output: apple banana orange  (a named vector)\n                            #         5      6      6\n\n    # Example 3:  'simplify = FALSE' to force a list result\n    list_result <- sapply(my_list, nchar, simplify = FALSE)\n    print(list_result)  # Output: a list\n    # $apple\n    # [1] 5\n    #\n    # $banana\n    # [1] 6\n    #\n    # $orange\n    # [1] 6\n\n    # Example 4: Passing extra arguments to FUN\n    my_vec <- 1:5\n    add_n <- function(x, n) {\n        x + n\n    }\n    result <- sapply(my_vec, add_n, n = 10) # adds 10 to each element\n    print(result) # 11 12 13 14 15\n    ```\n\n**`mapply` (Multivariate Apply)**\n\n*   **Purpose:**  Applies a function to *multiple* lists or vectors *in parallel*.  It's like a multivariate version of `sapply`.\n*   **Syntax:** `mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)`\n    *   `FUN`: The function to apply.\n    *   `...`:  The vectors or lists to which the function will be applied.  The function is applied element-by-element to these inputs.\n    *   `MoreArgs`: A list of *additional* arguments to `FUN` that are *not* vectorized (i.e., they are the same for each call to `FUN`).\n    *   `SIMPLIFY`:  Same as in `sapply`.\n    *   `USE.NAMES`:  Same as in `sapply`.\n\n*   **Examples:**\n\n    ```R\n    # Example 1: Add corresponding elements of two vectors\n    vector1 <- c(1, 2, 3)\n    vector2 <- c(10, 20, 30)\n    summed_elements <- mapply(function(x, y) x + y, vector1, vector2)\n    print(summed_elements)  # Output: [1] 11 22 33\n\n    # Example 2: Repeat each element of a vector a different number of times\n    values <- c(\"a\", \"b\", \"c\")\n    repeats <- c(2, 3, 1)\n    repeated_values <- mapply(rep, values, repeats)  #rep(\"a\",2), rep(\"b\",3), rep(\"c\",1)\n    print(repeated_values) # returns a list\n    # [[1]]\n    # [1] \"a\" \"a\"\n    #\n    # [[2]]\n    # [1] \"b\" \"b\" \"b\"\n    #\n    # [[3]]\n    # [1] \"c\"\n\n    # Example 3: Using 'MoreArgs'\n    my_fun <- function(x, y, prefix) {\n      paste(prefix, x, y, sep = \"_\")\n    }\n    result <- mapply(my_fun, 1:3, 4:6, MoreArgs = list(prefix = \"Result\"))\n    print(result) # \"Result_1_4\" \"Result_2_5\" \"Result_3_6\"\n\n    # Example 4: SIMPLIFY = FALSE\n    result_list <- mapply(rep, values, repeats, SIMPLIFY=FALSE)\n    print(result_list) # returns a list, same as example 2\n    ```\n\n**Key Differences and When to Use**\n\n*   **`sapply`:** Use when you have a *single* vector or list and want to apply a function to *each element* of it.\n*   **`mapply`:** Use when you have *multiple* vectors or lists and want to apply a function to the *corresponding elements* of those inputs.  It's also useful when your function takes multiple arguments, and you want to vectorize over some of them while keeping others constant.\n\nIn essence, `sapply` is for applying a function element-wise to a single input, while `mapply` is for applying a function element-wise to multiple inputs in parallel. Both are excellent for avoiding explicit loops and making your code more concise and readable.\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Level 0 - Learn R/TP 2.md",
      "content": "Okay, here's the breakdown of TP N° 2, formatted for easy copy-pasting without extra Markdown rendering, keeping the R code within triple backticks for direct execution.\n\n### A. Structures alternatives (Conditional Statements)\n\nL'instruction alternative (if-else statements) in R is very similar to C.  The basic structure is:\n\n```R\nx <- -5\nif (x > 0) {\n  print(\"Non-negative number\")\n} else {\n  print(\"Negative number\")\n}\n```\n\n*   **Key Point about Statement Termination:** R uses semicolons (`;`) and newlines to separate statements.  A semicolon *always* ends a statement.  A newline ends a statement *if the statement is syntactically complete*.\n\n*   **Error Example (and why it happens):**\n\n    ```R\n    x <- -5\n    if (x > 0) {print(\"Non-negative number\")} else {print(\"Negative number\")}\n    ```\n    Running `source(\"essai2.R\")` with the above code will produce an error: `unexpected 'else'`.\n    **Reason:** The `if` statement is considered *complete* on the first line because of the closing curly brace `}`.  R doesn't expect an `else` to follow a completed `if`. The correct ways to structure this are:\n    1.  Put the `else` on the same line as the closing brace of the `if`:\n        ```r\n        if (x > 0) {print(\"Non-negative number\")} else {print(\"Negative number\")}\n        ```\n    2.  Put the opening curly brace `{` on the same level, and the closing curly brace `}` in another line.\n        ```r\n         if (x>0)\n         {\n           print(\"Non-negative number\")\n         }\n         else\n         {\n           print(\"Negative number\")\n         }\n        ```\n\n*   **Observation Exercise:**  Type the following into the R console and press Enter *after the closing brace*:\n    ```R\n    if (x > 0) {\n    ```\n    **What you'll notice:** R will show a `+` prompt, indicating that it's waiting for the rest of the statement.  It hasn't executed the `if` yet because it's not syntactically complete (it needs a closing brace and potentially an `else` block).\n\n### B. Appels de fonctions R (Function Calls)\n\nFunction calls in R consist of the function name followed by arguments in parentheses, separated by commas.  Arguments often have names, which can be specified.\n\n*   **Example: `writeLines()`**\n    The `writeLines()` function writes text to a file (overwriting it if it exists). It takes two main arguments: the text to write (`text`) and the file connection (`con`, often a filename).\n\n    ```R\n    # Writing \"146.6\" to a file named \"popRate.txt\"\n    writeLines(\"146.6\", \"popRate.txt\")\n\n    # Equivalent call using named arguments:\n    writeLines(text = \"146.6\", con = \"popRate.txt\")\n\n    # Named arguments can be in any order:\n    writeLines(con = \"popRate.txt\", text = \"146.6\")\n\n    # If 'con' is omitted, it defaults to the console (standard output):\n    writeLines(\"146.6\")  # This will print \"146.6\" to the console\n    ```\n\n*  **Example 2: Verify seq behavior**\n    *   Execute these two commands:\n        ```R\n        seq(from=1, by=5, to=20)\n        seq(1, 5, 20)\n        ```\n        The output will be different.\n\n    *   Use `?seq` to view the help page for `seq`.\n\n        *   **Explanation of the difference:** The `seq` function has arguments in the order `from`, `to`, `by`, and others.  When you call `seq(1, 5, 20)`, you are providing values for `from`, `to`, and `by` *in that order*.  When you call `seq(from=1, by=5, to=20)`, you are explicitly naming the arguments, so the order doesn't matter, and the `to` parameter is correctly put.\n\n### C. Vecteurs (Vectors)\n\nVectors are fundamental data structures in R.  Here are common ways to create them:\n\n| Function          | Example                                     | Result            |\n| :---------------- | :------------------------------------------ | :---------------- |\n| `c(a, b, ...)`     | `c(1, 5, 9, 1)` or `c(c(1,5),c(9,1))`          | `1, 5, 9, 1`      |\n| `a:b`             | `1:5`                                       | `1, 2, 3, 4, 5`   |\n| `seq(from, to, by)` | `seq(from = 0, to = 6, by = 2)`            | `0, 2, 4, 6`      |\n| `rep(x, times, each)` | `rep(c(7, 3), times = 2, each = 2)`    | `7, 7, 3, 3, 7, 7, 3, 3` |\n\n*   **Determine the commands:**\n    *   To get `-7 -4 -1 2 5 8 11 14 17 20 23`:  `seq(-7, 23, by = 3)`\n    *   To get `1 3 5 7 9 11 13 15 17 19 21`: `seq(1,21,2)`\n    *   To get `3 3 5 5 7 7 9 9 3 3 5 5 7 7 9 9 3 3 5 5 7 7 9 9`: `rep(c(3,5,7,9),times=3,each=2)`\n*   **Accessing Vector Elements:**\n    *   Access elements using square brackets and indices (starting from 1).\n        ```R\n        a <- seq(2, 15, 3)\n        a[4]  # Access the 4th element\n        ```\n    * Accessing a sequence of elements by another vector.\n\n        ```R\n        a <- seq(2, 25, 3)\n        a[3:6]\n        a[c(2, 2, 1, 1)]\n        a[seq(2,10,3)]\n        ```\n* **ifelse**\n    * The ifelse() is a useful function for the element-wise conditional modification of a vector.\n    ```r\n    a = c(5,7,2,9)\n    ifelse(a %% 2 == 0,\"even\",\"odd\")\n    ```\n    * Create a script R that, if the input is a vector of integers, returns the corresponding vector of absolute values:\n     ```r\n     #create the file\n     #Write into it the following code:\n     #Read the vector\n     vect <- scan()\n     #apply the transformation\n     vect_abs <- ifelse(vect<0, -vect,vect)\n     #print the result\n     print(vect_abs)\n     #save the script\n     # Run source(\"script_name.R\")\n     # Give a test input\n    ```\n\n### D. Matrices\n\nMatrices are two-dimensional data structures. Create them using the `matrix()` function.\n\n```R\nx <- c(2, 4, 3, 1, 5, 7)\nA <- matrix(\n  x,          # The data elements\n  nrow = 2,   # Number of rows\n  ncol = 3,   # Number of columns\n  byrow = TRUE  # Fill matrix by rows (FALSE fills by columns)\n)\nprint(A)\n```\n\n*   **Accessing Matrix Elements:**\n    *   `A[i, j]`: Access the element at row `i` and column `j`.\n        ```R\n        A[2, 3]  # Access the element in the 2nd row, 3rd column\n        ```\n    *   `A[i, ]`: Extract the entire `i`-th row.\n        ```R\n        A[2, ]  # Extract the 2nd row\n        ```\n    *   `A[, j]`: Extract the entire `j`-th column.\n        ```R\n        A[, 3]  # Extract the 3rd column\n        ```\n    *   `A[, c(1, 3)]`: Extract a submatrix (columns 1 and 3 in this case).\n\n### D. Structures répétitives (Loops)\n\nR has three main loop structures:\n\n*   **`for` loop:**\n    ```R\n    for (variable in sequence) {\n      # instructions\n    }\n    ```\n\n*   **`while` loop:**\n    ```R\n    while (condition) {\n      # instructions\n    }\n    ```\n\n*   **`repeat` loop:**\n    ```R\n    repeat {\n      # instructions\n      if (condition) {\n        break\n      }\n    }\n    ```\n\n*   **Script 1 (and variations with `while` and `repeat`):**\n\n    ```R\n    # Original for loop script\n    mat <- matrix(data = seq(10, 21, by = 1), nrow = 6, ncol = 2)\n    for (i in 1:nrow(mat)) {\n      for (j in 1:ncol(mat)) {\n        cat(c(\"L'element a ligne \", i, \" et la colonne \", j, \" est \", mat[i, j]))\n        cat(\"\\n\")\n      }\n    }\n\n    # Equivalent while loop\n    mat <- matrix(data = seq(10, 21, by = 1), nrow = 6, ncol = 2)\n    i <- 1\n    while (i <= nrow(mat)) {\n      j <- 1\n      while (j <= ncol(mat)) {\n        cat(c(\"L'element a ligne \", i, \" et la colonne \", j, \" est \", mat[i, j]))\n        cat(\"\\n\")\n        j <- j + 1\n      }\n      i <- i + 1\n    }\n    # Equivalent repeat loop\n    mat <- matrix(data = seq(10, 21, by = 1), nrow = 6, ncol = 2)\n    i <- 1\n    repeat {\n      if (i > nrow(mat)) {\n        break\n      }\n      j <- 1\n      repeat {\n        if (j > ncol(mat)) {\n          break\n        }\n        cat(c(\"L'element a ligne \", i, \" et la colonne \", j, \" est \", mat[i, j]))\n        cat(\"\\n\")\n        j <- j + 1\n      }\n      i <- i + 1\n    }\n    ```\n\n*   **Script 2:**\n\n    ```R\n    mat <- matrix(data = seq(1, 12, by = 1), nrow = 6, ncol = 2)\n\n    vMoyLin <- rep(0, nrow(mat))\n    for (i in 1:nrow(mat)) {\n      for (j in 1:ncol(mat)) {\n        vMoyLin[i] <- vMoyLin[i] + mat[i, j]\n      }\n      vMoyLin[i] <- vMoyLin[i] / ncol(mat)\n    }\n\n    vMoyCol <- rep(0, ncol(mat))\n    for (j in 1:ncol(mat)) {\n      for (i in 1:nrow(mat)) {\n        vMoyCol[j] <- vMoyCol[j] + mat[i, j]\n      }\n      vMoyCol[j] <- vMoyCol[j] / nrow(mat)\n    }\n\n    print(mat)\n    print(vMoyLin)\n    print(vMoyCol)\n    ```\n\n*   **Script 3:**\n\n    ```R\n    mat <- matrix(data = seq(1, 12, by = 1), nrow = 6, ncol = 2)\n\n    for (i in 1:nrow(mat)) {\n      vMoyLin[i] <- mean(mat[i, ])\n    }\n\n    for (j in 1:ncol(mat)) {\n      vMoyCol[j] <- mean(mat[, j])\n    }\n    print(mat)\n    print(vMoyLin)\n    print(vMoyCol)\n    ```\n\n### D. Manipulations vectorielles avec apply() (Vectorized Operations with `apply()`)\n\nR provides functions like `apply()` for vectorized operations, which are often more concise and efficient than loops.\n\n*   `apply(X, MARGIN, FUN)`\n    *   `X`: The matrix.\n    *   `MARGIN`:  `1` for rows, `2` for columns.\n    *   `FUN`: The function to apply.\n\n```R\nmat <- matrix(data = seq(1, 12, by = 1), nrow = 6, ncol = 2)\n\nvMoyLin <- apply(mat, 1, mean)  # Calculate row means\nvMoyCol <- apply(mat, 2, mean)  # Calculate column means\n\nprint(mat)\nprint(vMoyLin)\nprint(vMoyCol)\n```\n\nThis provides a complete, copy-paste-friendly version of the second R tutorial, ready for use in your notes or R environment.\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Level 0 - Learn R/TP 1.md",
      "content": "Alright, let's break down the parts you provided and discuss them in a more descriptive manner:\n\n1. **Comments in R:**\n   In R, comments are like little notes you leave for yourself or others in the code. They start with the # character. Here's an example:\n\n   ```R\n   # This is a comment in R\n   ```\n\n2. **Purging the Console in R:**\n   When you want to clear up the clutter in the R console, just hit CTRL+L. It's like tidying up your workspace. A clean slate for your next command.\n\n3. **Ending R Operations:**\n   To wrap up your R session, you can use the `quit()` function or its shorter version `q()`. When you decide to exit, R might ask if you want to save your workspace. If you do, type 'y' and it'll store everything for your next coding adventure.\n\n   ```R\n   quit()  # or q()\n   ```\n\n4. **Purging the Workspace in R:**\n   If you want to go a step further and clear out all the variables (things you've stored in memory), you can use the command `rm(list=ls())`. It's like wiping the slate clean, ready for a new set of variables.\n\n   ```R\n   rm(list=ls())\n   ```\n\nRemember, these are handy tools to manage your R environment efficiently, ensuring a clean and organized coding experience.\n\n\n\n---\n\n\n# **Variables**\n\n\nLet's delve into the details of variables in R and interpret the provided code snippet:\n\n**Understanding Variable Classes:**\n- **Logical:** Represents boolean values (TRUE or FALSE).\n- **Integer:** Deals with integers (e.g., 400L and -50L).\n- **Numeric:** Handles real numbers (e.g., 400.0 and 400).\n- **Complex:** Manages complex numbers (e.g., 1 + 0i, 1 + 4i).\n- **Character:** Stores character strings (e.g., \"a\", 'swc').\n\n**Creating Variables in R:**\nTo create a variable, you associate it with an identifier and assign it a value using `=` or `<-`. Here's an example:\n\n```R\nvariable_name <- 42\n```\n\n**Interpreting the Code:**\nThe code snippet you provided:\n\n```R\n[1] 42\n[1] 8\n[1] 18\n```\n\nThis output suggests that three separate expressions or commands were run, each producing a result. The `[1]` indicates the output index.\n\n- The first line `[1] 42` is the result of a command that likely assigned the value 42 to a variable.\n- The second line `[1] 8` suggests another command, possibly involving the number 8.\n- The third line `[1] 18` follows a similar pattern, indicating the result of another computation.\n\n**Role of Writing the Variable Identifier Alone:**\nWhen you write the variable identifier alone in the console, R displays the value of that variable. For instance:\n\n```R\nvariable_name\n```\n\nThis would output the value assigned to `variable_name`, allowing you to inspect or use the variable interactively.\n\n**Scalar Objects in R:**\nThe statement \"All objects in R are composite, and a scalar is likened to an object composed of a single element\" highlights that even a single value, like an integer or character, is treated as an object in R. This emphasizes the consistent handling of data structures, regardless of size.\n\nFeel free to run your own R code and experiment with these concepts!\n\n---\n\n1. Introduction to R\n   - Basic syntax and operations\n   - Working with RStudio\n\n2. Data Types in R\n   - Numeric\n   - Character\n   - Logical\n   - Factor\n\n3. Data Structures\n   - Vectors\n   - Matrices\n   - Lists\n   - Data Frames\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Level 0 - Learn R/TP 1.1.md",
      "content": "Okay, I understand. Here's the same information, formatted for direct copy-pasting without the Markdown code blocks. I've kept the structure and explanations, but removed the Markdown formatting that would render in a Markdown viewer. I have retained the R code blocks (using triple backticks) so that you can copy and paste the R code directly into your R console.\n\n---\n\n### A. Installing R\n\nR is available for both Windows and Linux.  The installation process depends on your operating system.\n\n1.  **Go to CRAN:** Visit the CRAN Mirrors page (https://cran.r-project.org/mirrors.html).\n2.  **Choose a Mirror:** Select a mirror site geographically close to you.  This will speed up the download.  The example given is `http://ftp.igh.cnrs.fr/pub/CRAN/`.\n3.  **Select Your OS:**  Click the link for your operating system (Windows or Linux).\n4.  **Follow Instructions:**  The CRAN website will provide detailed instructions for your specific OS.\n5.  **For Ubuntu Linux Specifically**:\n    Precautions must be taken before installation, check https://cran.r-project.org/bin/linux/ubuntu/ for more details, otherwise open terminal and run:\n\n```bash\nsudo apt-get install r-base\n```\n\nThis command uses the `apt-get` package manager to install the `r-base` package, which is the core R system.\n\n### B. Installing R Packages\n\nR packages extend the functionality of base R.  You'll often need to install packages for specific tasks.\n\nTo install a package, use the `install.packages()` function:\n\n```R\ninstall.packages(\"packageName\", dependencies = TRUE)\n```\n\n*   `\"packageName\"`:  Replace this with the actual name of the package you want to install (e.g., \"ggplot2\", \"dplyr\").  The name *must* be in quotes.\n*   `dependencies = TRUE`:  This is generally recommended. It tells R to also install any other packages that the package you're installing depends on.\n    *   Example:\n\n```R\ninstall.packages(\"ggplot2\", dependencies = TRUE) # Install ggplot2 and its dependencies.\ninstall.packages(\"dplyr\", dependencies = TRUE)\ninstall.packages(\"readr\", dependencies = TRUE)\n```\n\n### C. The R Console\n\nThe R console is an interactive environment where you can execute R code.\n\n*   **Starting R:**\n    *   **Windows:** Find and run `R.exe`.\n    *   **Linux:** Open a terminal and type `R`, then press Enter.\n* You will see the output in the console (see example in the document).\n* **Basic Commands:**\n\n```R\n   demo(graphics) # View a graphics demonstration.\n   q()  # Quit R.  It will ask if you want to save your workspace.\n   # comments starts with # symbol\n   CTRL+L # Clear the console\n   rm(list=ls()) #clear the workspace\n```\n\n```R\n# Example 1: Simple calculation\n2 + 3\n\n# Example 2:  Displaying a message\nprint(\"Hello, R!\")\n\n# Example 3: Quit\n# q() # Uncomment this to actually quit R\n```\n\n### D. Variables in R\n\nIn R, every variable is an object.  R has five fundamental data types (atomic classes):\n\n1.  **logical:** Boolean values (`TRUE` or `FALSE`).\n2.  **integer:** Whole numbers (e.g., `42L`, `-10L`).  The `L` suffix forces an integer.\n3.  **numeric:**  Real numbers (e.g., `3.14`, `-2.7`, `10`).  This includes both integers and decimals.\n4.  **complex:** Complex numbers (e.g., `1 + 2i`).\n5.  **character:** Text strings (e.g., `\"hello\"`, `'R is fun!'`).\n\n**Variable Assignment:**\n\nYou can assign values to variables using either `<-` (preferred) or `=`.  You can also use `->` to assign in the opposite direction.  The variable name (identifier) is case-sensitive.\n\n```R\n# Examples using <-\nx <- 10       # Assign the value 10 to the variable x\ny <- \"Hello\"  # Assign the string \"Hello\" to y\nz <- TRUE     # Assign the logical value TRUE to z\n\n# Examples using =\na = 5\nb = \"World\"\nc = FALSE\n\n#Examples using ->\n25 -> k\n\"test\" -> l\nFALSE -> m\n\n# Displaying the value of a variable\nx\ny\nz\na\nb\nc\nk\nl\nm\n```\n\n```R\n# Example 1: Numeric, Integer, Logical\nmy_numeric <- 3.14159\nmy_integer <- 10L\nmy_logical <- TRUE\n\nprint(my_numeric)\nprint(my_integer)\nprint(my_logical)\n\n# Example 2: Character and Complex\nmy_string <- \"R Programming\"\nmy_complex <- 2 + 3i\n\nprint(my_string)\nprint(my_complex)\n\n# Example 3: Reassigning a variable\nmy_variable <- 5\nprint(my_variable)\nmy_variable <- \"Now it's a string\"\nprint(my_variable)\n```\n**Role of just writing the variable name:**\nWriting the name of the variable in R and executing it is equivalent to using a display method (like the function print()).\n\n### E. Data Input and Output\n\n**Input with `scan()`**\n\nThe `scan()` function reads data from the keyboard (or a file).\n\n```R\n# Basic usage: reads numeric data until an empty line is entered\nmy_numbers <- scan()\n#Enter your inputs one by one in the console, ex:\n#1\n#2\n#3\n#\nprint(my_numbers)\n```\n\n*   **Reading a specific number of values:** Use the `nmax` argument.\n\n```R\n# Read only one value\nsingle_value <- scan(nmax = 1)\n#1\nprint(single_value)\n\n#Read three values\nthree_value <- scan(nmax=3)\n#1\n#2\n#3\nprint(three_value)\n```\n\n*   **Reading non-numeric data:** Use the `what` argument.\n\n```R\n# Read a string\nmy_string <- scan(what = \"character\", nmax = 1)\n# hello\nprint(my_string)\n# Read a logical value\nmy_logical1 <- scan(what=TRUE, nmax=1)\n#TRUE\nprint(my_logical1)\nmy_logical2 <- scan(what = logical(), nmax = 1)\n#FALSE\nprint(my_logical2)\n```\n * Use the str() to check the variable type:\n\n```R\nx <- scan(what = logical(), nmax = 4)\n#TRUE\n#FALSE\n#FALSE\n#TRUE\nstr(x)\n```\n\n**Output with `print()`**\n\nThe `print()` function displays values.  You can control the output format.\n\n```R\nx <- 12.3456789\n\nprint(x)                 # Default display\nprint(x, digits = 3)     # Show 3 significant digits\nprint(x, digits = 5)     # Show 5 significant digits\n```\n\n```R\n# Example 1: Basic Input and Output\nname <- scan(what = \"character\", nmax = 1) #read an input from console\n#yourName\nprint(paste(\"Hello,\", name, \"!\"))\n\n# Example 2:  Controlling output digits\npi_approx <- 3.14159265359\nprint(pi_approx, digits = 4)\nprint(pi_approx, digits = 7)\n\n# Example 3: Reading and displaying multiple values\nnumbers <- scan(nmax = 3)\n#10\n#20\n#30\nprint(numbers)\nprint(sum(numbers)) # Calculate and print the sum\n\n#Read variables from the 5 atomic classes\nv_logical <- scan(what=logical(),nmax=1)\nv_integer <- scan(what=integer(),nmax=1)\nv_numeric <- scan(what=numeric(),nmax=1)\nv_complex <- scan(what=complex(),nmax=1)\nv_character <- scan(what=character(),nmax=1)\n#Test inputs:\n#TRUE\n#2L\n#1.2\n#1+3i\n#\"test\"\n\n#print the result\nprint(\"The entered values are:\")\nprint(v_logical)\nprint(v_integer)\nprint(v_numeric)\nprint(v_complex)\nprint(v_character)\n#verify the type\nprint(\"Type of entered variables:\")\nstr(v_logical)\nstr(v_integer)\nstr(v_numeric)\nstr(v_complex)\nstr(v_character)\n\n# Example using external file:\n#create the file essai.R\n#write into it using text editor:\n# # Read two values and print their sum\n# a <- scan(nmax = 1)\n# b <- scan(nmax = 1)\n# sum_ab <- a + b\n# print(paste(\"The sum of\", a, \"and\", b, \"is\", sum_ab))\n#save and close\n#run this command in the console:\nsource(\"essai.R\") # make sure the file is located in the same folder, or provide path\n#1\n#2\n#getwd()\n#setwd(\"new path\")\n```\n\n### F. R Operators\n\nR provides a range of operators for performing calculations and comparisons.\n\n| Operator | Description            |\n| :-------- | :--------------------- |\n| `+`       | Addition               |\n| `-`       | Subtraction            |\n| `*`       | Multiplication         |\n| `/`       | Division               |\n| `%%`      | Modulo (remainder)     |\n| `%/%`     | Integer Division       |\n| `^`       | Exponentiation         |\n| `:`       | Sequence               |\n| `==`      | Equal to               |\n| `!=`      | Not equal to           |\n| `>`       | Greater than           |\n| `>=`      | Greater than or equal to |\n| `<`       | Less than              |\n| `<=`      | Less than or equal to  |\n| `&`       | Logical AND (element-wise)|\n| `&&`      | Logical AND (single)   |\n| `|`       | Logical OR (element-wise) |\n| `||`      | Logical OR (single)    |\n| `!`       | Logical NOT            |\n\n**Operator Precedence (highest to lowest):**\n\n1.  `^` (Exponentiation - right to left)\n2.  `-` `+` (Unary minus and plus)\n3.  `:` (Sequence)\n4.  `%any%` (e.g. `%%`, `%/%`)\n5.  `*`, `/`\n6.  `+`,`-`\n7.  `<`, `>`, `<=`, `>=`, `==`, `!=`\n8.  `!`\n9.  `&`, `&&`\n10. `|`, `||`\n11. `->`\n12. `<-`\n13. `=`\n\n```R\n# Example 1: Arithmetic Operators\nprint(10 + 5)\nprint(10 - 5)\nprint(10 * 5)\nprint(10 / 5)\nprint(10 %% 3)  # Modulo\nprint(10 %/% 3) # Integer division\nprint(2^4)     # Exponentiation\n\n# Example 2: Comparison Operators\nprint(10 > 5)\nprint(10 < 5)\nprint(10 == 10)\nprint(10 != 5)\n\n# Example 3: Logical Operators\nprint(TRUE & TRUE)\nprint(TRUE & FALSE)\nprint(TRUE | FALSE)\nprint(!TRUE)\nprint( (5>3) && (2<7))\n#check if comparison operators are associable\nprint( 1<2<3) # left to right\nprint( 3>2>1)\n\n# Create a file operator.R as the document example\n# And run this code in console:\n# source(\"operateur.R\")\n```\n### G. Identifiers in R\n\nIdentifiers are the names you give to variables, functions, etc.  Here are the rules:\n\n*   Can contain letters, numbers, periods (`.`), and underscores (`_`).\n*   Cannot start with a number or an underscore.\n*   Cannot start with a period followed by a number.\n*   **Reserved words:**  You cannot use the following as identifiers:\n    `if`, `else`, `repeat`, `while`, `function`, `for`, `in`, `next`, `break`, `TRUE`, `FALSE`, `NULL`, `Inf`, `NaN`, `NA` , ...etc.\n\n```R\n# Example 1: Valid Identifiers\nmy_variable <- 10\nvariable.1 <- \"hello\"\n_another_variable <- TRUE  #This is not a good practice, but shows the case.\n\nprint(my_variable)\nprint(variable.1)\n\n# Example 2: Invalid Identifiers (will produce errors)\n# 1st_variable <- 5  # Cannot start with a number\n# _variable <- 10 #cannot start with _\n# .2variable<-2 # Cannot start with a period followed by a number\n\n# Example 3: Reserved words\n# if <- 5     # Error:  'if' is a reserved word\nTRUE_value <- FALSE #Valid variable name, not using the keyword\nprint(TRUE_value)\n\nTrue <- 1; True # shows that True isn't the keyword TRUE\ne<- 10;e #valid\n```\n---\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    },
    {
      "filePath": "Course Content.md",
      "content": "Okay, here's a breakdown of the AI course content based on the PDF's OCR, including chapters, subtopics, and summaries from the student's notes where available:\n\n**Chapter 1: Introduction**\n\n*   **Definition of AI:** AI is the set of theories and techniques used to create machines capable of simulating human intelligence.\n*   **History:**\n    *   McCulloch and Pitts' work on artificial neural networks (1943)\n    *   The 1950s and the question \"Can machines think?\"\n    *   Turing Test: A program passes the test if it can imitate a human well enough to convince another human.\n*   **Current Trends:** Focus on designing solutions for specific problems like pattern recognition, natural language processing, automatic translation, automatic control, games, etc.\n*   **Knowledge Representation:**\n    *   **Semantic Networks:** Graphs representing concepts and relationships. Key relationships are:\n        *   `est_un` (ISA): expresses belonging (e.g., Garfield *is a* cat)\n        *   `sorte_de` (AKO): expresses inclusion (e.g., cats are a *kind of* feline)\n    *   **Production Rules:** Expressed in the form \"IF <antecedent> THEN <consequent>\".\n        *   **Propositional Logic:** Uses Boolean variables and operators (¬, ∧, ∨, ⇒, ⇔).\n        *   **Predicate Logic:** Extends propositional logic with symbolic variables, quantifiers (∃, ∀), and predicates.\n        *   **Example (from student notes):** Representing family relationships (father, son, daughter, etc.) using propositional logic and predicate logic.\n*   **Inferences:** Reasoning methods to generate new knowledge.\n    *   **Semantic Networks:**\n        *   Inheritance (AKO relations)\n        *   Instantiation (ISA relations)\n    *   **Propositional and Predicate Logic:**\n        *   Modus Ponens: If P, Then Q. P is true; therefore, Q is true.\n        *   Modus Tollens: If P, Then Q. ¬Q is true; therefore, ¬P is true.\n*   **Learning:** Designing programs that improve automatically using training data.\n    *   **Applications:** Spam detection, voice recognition, computer vision, etc.\n    *   **Supervised Learning:** The system is trained with labeled data (input and desired output).\n    *   **Unsupervised Learning:** The system finds patterns in unlabeled data.\n\n**Chapter 2: Expert Systems**\n\n*   **Definition:** Programs that replicate the cognitive mechanisms of an expert in a specific domain.\n*   **Applications:**\n    *   MYCIN: Diagnosis of blood disorders (1979).\n    *   DENDRAL: Identification of the chemical structure of a material (1965).\n*   **Components:**\n    *   **Knowledge Base (KB):** Contains facts (BF) and rules (BR).\n        *   **Example (from PDF and student notes):**\n            *   Facts: \"animal has feathers\", \"animal has a long neck\", \"animal has long legs\"\n            *   Rules: \"IF animal flies AND animal lays eggs THEN animal is a bird\", \"IF animal has feathers THEN animal is a bird\", \"IF animal is a bird AND animal has a long neck AND animal has long legs THEN animal is an ostrich\"\n            *   **Student notes also define:** BF: F1:D, F2:E, F3:F, and BR: R1: A∧B⇒C, R2: D⇒C, R3: C∧E∧F⇒G\n    *   **Inference Engine (IE):** Applies rules to facts to derive new knowledge.\n        *   **Forward Chaining:** Starts with known facts and applies rules to derive new facts until a goal is reached or no more rules can be applied.\n            *   **Example (from PDF and student notes):** Given BF={D, E, F} and goal G, choose R2 (D⇒C), update BF to {D, E, F, C}, then choose R3 (C∧E∧F⇒G), update BF to {D, E, F, C, G}, goal reached.\n            *   **Student notes also define:** Conflict resolution strategies: First-Rule, Last_Fact, Condition_Aware.\n        *   **Backward Chaining:** Starts with a goal and works backward, finding rules that can prove the goal and setting their antecedents as new subgoals.\n            *   **Example (from PDF and student notes):** Given goal G, find R3 (C∧E∧F⇒G), set C as a new subgoal, find R2 (D⇒C), since D is true, C is proven, and then G is proven.\n        *   **AND/OR Tree (from student notes):** A tree representation for backward chaining, showing goals, subgoals, and the rules that connect them.\n\n**Chapter 3: Decision Trees**\n\n*   **Definition:** Supervised learning methods for solving problems defined by:\n    *   Objects (ω₁, ..., ωₙ) described by attributes (X₁, ..., Xₚ).\n    *   A target variable (Y).\n*   **Dataset:** (X, Y) represents the training data.\n*   **Types:**\n    *   **Regression Trees:** Target variable is continuous.\n    *   **Classification Trees:** Target variable is discrete.\n*   **Example (PlayTennis):** Predicting whether to play tennis based on Outlook, Temperature, Humidity, and Wind.\n*   **Concepts:**\n    *   **Entropy:** Measures the impurity of a set of examples.\n        *   H(S) = -p₁log₂(p₁) - p₂log₂(p₂) - ... - pₘlog₂(pₘ)\n    *   **Information Gain:** Measures the reduction in entropy achieved by partitioning a set of examples based on an attribute.\n        *   Gain(S, Xᵢ) = H(S) - Σ(|Sᵥ|/|S|) \\* H(Sᵥ)\n*   **Partitioning Algorithm (ID3):**\n    1. Calculate the entropy of the dataset.\n    2. Calculate the information gain for each attribute.\n    3. Choose the attribute with the highest information gain to split the dataset.\n    4. Recursively apply steps 1-3 to each subset until a stopping criterion is met (e.g., pure node, maximum depth).\n*   **Evaluation:**\n    *   **Confusion Matrix:** Shows the counts of true positives, true negatives, false positives, and false negatives.\n    *   **Accuracy:** (TN + TP) / (TN + TP + FN + FP)\n    *   **Error Rate:** 1 - Accuracy\n\n**Chapter 4: Fuzzy Logic**\n\n*   **History:**\n    *   Introduced by Lotfi A. Zadeh in 1965.\n    *   Ebrahim Mamdani developed a fuzzy inference system for controlling a steam engine in 1975.\n    *   Gained popularity in Japan in the 1980s, used in products like washing machines and cameras (\"fuzzy logic inside\").\n*   **Motivation:** Handles imprecise or uncertain information, unlike classical logic which requires crisp values.\n    *   **Example:** A driver doesn't need precise values for acceleration, braking force, or steering angle; they make decisions based on imprecise information about the proximity of a stop sign or traffic light.\n*   **Key Concepts:**\n    *   **Fuzzy Sets:** Sets where elements have a degree of membership between 0 and 1.\n    *   **Linguistic Variables:** Concepts represented by fuzzy sets (e.g., \"temperature\").\n    *   **Linguistic Values:** Words associated with a linguistic variable (e.g., \"cold,\" \"warm,\" \"hot\").\n    *   **Universe of Discourse:** The range of crisp values for a linguistic variable.\n    *   **Membership Functions (μₐ(x)):** Assign a degree of membership (between 0 and 1) to each element in the universe of discourse for a given fuzzy set A.\n        *   **Common shapes:** Triangular, trapezoidal.\n*   **Fuzzy Inference System:**\n    1. **Fuzzification:** Crisp inputs are converted into fuzzy sets using membership functions.\n    2. **Inference Engine:** Applies fuzzy rules to the fuzzy inputs.\n    3. **Defuzzification:** The fuzzy output is converted into a crisp output.\n*   **Mamdani Method:**\n    *   **Example:** Controlling a fan's speed based on temperature and humidity.\n    1. **Fuzzification:** Crisp temperature and humidity values are mapped to fuzzy sets (e.g., \"low,\" \"medium,\" \"high\").\n    2. **Inference:** Fuzzy rules are applied:\n        *   IF temperature is low OR humidity is dry THEN fan speed is low.\n        *   IF temperature is medium AND humidity is humid THEN fan speed is medium.\n        *   IF temperature is high THEN fan speed is high.\n        *   **Fuzzy operators:** OR (max), AND (min), implication (min).\n    3. **Defuzzification:** The fuzzy output (fan speed) is converted into a crisp value using the center of gravity method.\n        *   CG = Σ(μ(x) \\* x) / Σ(μ(x))\n\n**Chapter 5: Genetic Algorithms**\n\n*   **Introduction to Optimization:** Finding the best solution among a set of possible solutions.\n    *   **Knapsack Problem:** Selecting items with maximum total value within a weight constraint.\n    *   **Traveling Salesman Problem (TSP):** Finding the shortest route that visits a set of cities and returns to the starting city.\n*   **Classification of Optimization Algorithms:**\n    *   **Exact Algorithms:** Guaranteed to find the optimal solution (e.g., enumeration), but may be computationally expensive for large problems.\n    *   **Approximate Algorithms:** Find good solutions in a reasonable amount of time, but not necessarily the optimal solution.\n        *   **Heuristic Algorithms:** Use problem-specific knowledge to guide the search.\n        *   **Metaheuristic Algorithms:** General-purpose algorithms that can be applied to a wide range of problems (e.g., genetic algorithms).\n            *   **Single Point Search Algorithms**\n            *   **Population-Based Algorithms**\n\n*   **History of Genetic Algorithms:**\n    *   John Henry Holland is considered the pioneer (1975).\n    *   David Edward Goldberg popularized GAs with his book in 1989.\n*   **Algorithm:**\n    1. **Create Initial Population:** Generate a set of candidate solutions (chromosomes).\n    2. **Evaluate Each Individual:** Calculate the fitness of each chromosome based on the objective function.\n    3. **Terminate?:** Check if a termination condition is met (e.g., maximum number of generations, satisfactory fitness).\n    4. **Selection:** Select chromosomes for reproduction based on their fitness (e.g., roulette wheel selection).\n    5. **Crossover:** Combine genetic material from selected chromosomes to create new offspring.\n    6. **Mutation:** Introduce random changes in the offspring's genes.\n    7. **Get New Population:** Replace the old population with the new offspring.\n    8. Repeat steps 2-7 until termination.\n*   **Key Concepts:**\n    *   **Chromosome:** A candidate solution represented as a string of genes.\n    *   **Fitness:** A measure of how good a solution is.\n    *   **Selection:** Choosing chromosomes for reproduction.\n    *   **Crossover:** Combining genetic material.\n    *   **Mutation:** Introducing random changes.\n    *   **Population:** Set of chromosomes.\n\n**Student Notes (L3 AI):**\n\nThe student notes seem to be a summary of the course content, focusing on:\n\n*   Semantic Networks: Emphasizes ISA and AKO.\n*   Rules of production.\n*   Examples using Garfield, cats, felines, carnivores, etc.\n*   Definition of an expert system.\n*   BF and BR.\n*   Forward Chaining (chainage avant).\n*   Backward Chaining (chainage arrière).\n*   Conflict Resolution: First-Rule, Last-Fact.\n*   AND/OR Tree.\n*   Decision Trees: Definition, ID3, and the Play Tennis example.\n*   Fuzzy Logic: Mamdani method.\n*   And most of the chapters.\n\nThis outline should give you a good understanding of the AI course content as presented in the provided PDF. Let me know if you have any other questions!\n",
      "testStatus": {
        "testsReady": true,
        "passed": 0,
        "total": 0
      }
    }
  ],
  "testDocuments": {
    "free or discounted services to nonprofit organizations.md": {
      "description": "Test questions on free and discounted software and services for nonprofits.",
      "questions": [
        {
          "question": "Name three major cloud providers that offer special programs for nonprofits. (1)",
          "type": "short"
        },
        {
          "question": "What are the primary benefits of Google Workspace for Nonprofits? (1)",
          "type": "short"
        },
        {
          "question": "Explain how cloud computing resources can benefit nonprofit organizations. (2)",
          "type": "long"
        },
        {
          "question": "Compare and contrast the free tier offerings of Google Cloud Platform (GCP) and Oracle Cloud, highlighting their strengths and limitations for nonprofits. (3)",
          "type": "extended"
        },
        {
          "question": "What security and infrastructure services does Cloudflare offer nonprofits for free? (1)",
          "type": "short"
        },
        {
          "question": "Besides cloud services, name two other types of software frequently offered to nonprofits at discounted rates or for free. Provide examples. (2)",
          "type": "long"
        },
        {
          "question": "What is TechSoup, and what role does it play in connecting nonprofits with technology? (1)",
          "type": "short"
        },
        {
          "question": "Why is verifying nonprofit status crucial for accessing discounted or free services? What documentation might be required? (2)",
          "type": "long"
        },
        {
          "question": "A small nonprofit with limited resources needs to improve its online fundraising, marketing, and document management.  Discuss which free or discounted services mentioned in the notes would be most beneficial and why. (3)",
          "type": "extended"
        },
        {
          "question": "Which free tier offering would you recommend to a nonprofit needing a NoSQL database, and why? (1)",
          "type": "short"
        }
      ],
      "answers": {},
      "score": 0,
      "markResults": [
        {
          "marks": 0,
          "maxMarks": 1,
          "feedback": "No answer provided."
        },
        {
          "marks": 0,
          "maxMarks": 1,
          "feedback": "No answer provided."
        },
        {
          "marks": 0,
          "maxMarks": 2,
          "feedback": "No answer provided."
        },
        {
          "marks": 0,
          "maxMarks": 3,
          "feedback": "No answer provided."
        },
        {
          "marks": 0,
          "maxMarks": 1,
          "feedback": "No answer provided."
        },
        {
          "marks": 0,
          "maxMarks": 2,
          "feedback": "No answer provided."
        },
        {
          "marks": 0,
          "maxMarks": 1,
          "feedback": "No answer provided."
        },
        {
          "marks": 0,
          "maxMarks": 2,
          "feedback": "No answer provided."
        },
        {
          "marks": 0,
          "maxMarks": 3,
          "feedback": "No answer provided."
        },
        {
          "marks": 0,
          "maxMarks": 1,
          "feedback": "No answer provided."
        }
      ]
    }
  }
}